{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Install Neovim and clone practicalli/neovim-config-redux git clone https://github.com/practicalli/neovim-config-redux.git Install pages detail the resources and recommended approaches to installing Neovim, Neovim packages, Java, Clojure, terminals, fonts and supporting tools Practicalli Neovim for Clojure developers Neovim is a highly extensible and powerful editor, supporting mult-modal editing and Vim-style key bindings. Practicalli Neovim will guide you through installing Clojure and Neovim and how to use them for a simple, powerful and fun REPL Driven Development workflow","title":"Overview"},{"location":"#getting-started","text":"Install Neovim and clone practicalli/neovim-config-redux git clone https://github.com/practicalli/neovim-config-redux.git Install pages detail the resources and recommended approaches to installing Neovim, Neovim packages, Java, Clojure, terminals, fonts and supporting tools","title":"Getting Started"},{"location":"#practicalli-neovim-for-clojure-developers","text":"Neovim is a highly extensible and powerful editor, supporting mult-modal editing and Vim-style key bindings. Practicalli Neovim will guide you through installing Clojure and Neovim and how to use them for a simple, powerful and fun REPL Driven Development workflow","title":"Practicalli Neovim for Clojure developers"},{"location":"contributing/","text":"Contributing to Practicalli Neovim practicalli/neovim is written in markdown and uses GitBook to generate the website via a GitHub action. By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct. Book status Submit and issue or idea If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can. Considering a Pull request? Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though. Thank you to all that have contributed I'd like to especially thank Oliver Caldwell for the amazing Conjure project and Rafael Delboni for helping me understand how to work with Fennel. A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the recent Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place.","title":"Contribute"},{"location":"contributing/#contributing-to-practicalli-neovim","text":"practicalli/neovim is written in markdown and uses GitBook to generate the website via a GitHub action. By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.","title":"Contributing to Practicalli Neovim"},{"location":"contributing/#book-status","text":"","title":"Book status"},{"location":"contributing/#submit-and-issue-or-idea","text":"If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.","title":"Submit and issue or idea"},{"location":"contributing/#considering-a-pull-request","text":"Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.","title":"Considering a Pull request?"},{"location":"contributing/#thank-you-to-all-that-have-contributed","text":"I'd like to especially thank Oliver Caldwell for the amazing Conjure project and Rafael Delboni for helping me understand how to work with Fennel. A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the recent Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place.","title":"Thank you to all that have contributed"},{"location":"writing-tips/","text":"Writing tips for MkDocs Making the docs more engaging using the mkdocs-material theme reference guide Admonitions Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE Collapsing admonitions Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\" Inline blocks Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Buttons Convert any link into a button by adding { .md-button } class names to end of the markdown for a link [link text](http://practical.li/blog){ .md-button .md-button-primary } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues Code blocks Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) GitHub action example with multiple annotations Material for MkDocs name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Code blocks with annotation, add ! after the annotation number to suppress the # character ls -la $HOME /Downloads # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Throw in a bit of highlighting for good measure ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Content tabs Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl Diagrams Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Other diagram types Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile. Formatting Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del Grids Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature Images Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark Lists Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tooltips The humble tool tip Hover me with references Hover me Icon tool tip with a title Abreviations The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium Magic links MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Writing Tips"},{"location":"writing-tips/#writing-tips-for-mkdocs","text":"Making the docs more engaging using the mkdocs-material theme reference guide","title":"Writing tips for MkDocs"},{"location":"writing-tips/#admonitions","text":"Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE","title":"Admonitions"},{"location":"writing-tips/#collapsing-admonitions","text":"Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\"","title":"Collapsing admonitions"},{"location":"writing-tips/#inline-blocks","text":"Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Inline blocks"},{"location":"writing-tips/#buttons","text":"Convert any link into a button by adding { .md-button } class names to end of the markdown for a link [link text](http://practical.li/blog){ .md-button .md-button-primary } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues","title":"Buttons"},{"location":"writing-tips/#code-blocks","text":"Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) GitHub action example with multiple annotations Material for MkDocs name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Code blocks with annotation, add ! after the annotation number to suppress the # character ls -la $HOME /Downloads # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Throw in a bit of highlighting for good measure ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ]))","title":"Code blocks"},{"location":"writing-tips/#content-tabs","text":"Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl","title":"Content tabs"},{"location":"writing-tips/#diagrams","text":"Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Diagrams"},{"location":"writing-tips/#other-diagram-types","text":"Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile.","title":"Other diagram types"},{"location":"writing-tips/#formatting","text":"Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del","title":"Formatting"},{"location":"writing-tips/#grids","text":"Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature","title":"Grids"},{"location":"writing-tips/#images","text":"Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark","title":"Images"},{"location":"writing-tips/#lists","text":"Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Lists"},{"location":"writing-tips/#tooltips","text":"The humble tool tip Hover me with references Hover me Icon tool tip with a title","title":"Tooltips"},{"location":"writing-tips/#abreviations","text":"The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium","title":"Abreviations"},{"location":"writing-tips/#magic-links","text":"MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Magic links"},{"location":"install/","text":"Install Overview Practicalli Neovim provides a feature rich configuration for Neovim and all the tools required for effective Clojure development (and other Lisp dialects too). Clojure tooling and a Java SDK (Java Virtual Machine) Neovim 7 or nightly build Neovim package manager and packages NerdFonts for icon support in themes and status line Brief summary of install If you are familiar with most of the tools required, then the quick start list below provides an ultra-terse version on how to get started with Neovim and Clojure development. Install Neovim 7 or greater - development build recommended Ubuntu daily builds PPA brew install --HEAD neovim for Homebrew install of development version Install supporting tools tar & curl and a C compiler, e.g. gcc for Linux or clang for android/termix (required by nvim-treesitter) ripgrep to search for files (used by telescope) Clone Neovim Config Run nvim in a terminal and ignore the warning, press RTN :PackerInstall command in Neovim Install Clojure CLI (or Leiningen) Clone / fork practicalli/clojure-deps-edn or add an alias with the required config to use nrepl and cider-nrepl Run a Clojure REPL process - in a separate terminal session clojure -M:repl/rebel for a rich REPL UI clojure -M:repl/cider for a basic REPL UI clojure -M:repl/headless for a headless REPL process Open a Clojure file in Neovim - Conjure will automatically connect Next Steps Learn how to use Neovim and how to use Conjure for REPL driven development Clojure Conjure is the main Neovim plugin for Clojure, providing a REPL driven development workflow. A Java OpenJDK install (e.g. Eclipse Temurin , AWS corretto ) is required to host Clojure applications. Clojure CLI or Leiningen are tools that Conjure can use to start a Clojure REPL. Clojure LSP server provides static analytics for Neovim LSP client to provide live linting of code as its written, aid with code refactor actions and supporting code writing tools. Neovim Neovim 7 is the latest release and is recommended. Or an Neovim pre-release or nightly build if you are feeling more adventurous.","title":"Install Overview"},{"location":"install/#install-overview","text":"Practicalli Neovim provides a feature rich configuration for Neovim and all the tools required for effective Clojure development (and other Lisp dialects too). Clojure tooling and a Java SDK (Java Virtual Machine) Neovim 7 or nightly build Neovim package manager and packages NerdFonts for icon support in themes and status line","title":"Install Overview"},{"location":"install/#brief-summary-of-install","text":"If you are familiar with most of the tools required, then the quick start list below provides an ultra-terse version on how to get started with Neovim and Clojure development. Install Neovim 7 or greater - development build recommended Ubuntu daily builds PPA brew install --HEAD neovim for Homebrew install of development version Install supporting tools tar & curl and a C compiler, e.g. gcc for Linux or clang for android/termix (required by nvim-treesitter) ripgrep to search for files (used by telescope) Clone Neovim Config Run nvim in a terminal and ignore the warning, press RTN :PackerInstall command in Neovim Install Clojure CLI (or Leiningen) Clone / fork practicalli/clojure-deps-edn or add an alias with the required config to use nrepl and cider-nrepl Run a Clojure REPL process - in a separate terminal session clojure -M:repl/rebel for a rich REPL UI clojure -M:repl/cider for a basic REPL UI clojure -M:repl/headless for a headless REPL process Open a Clojure file in Neovim - Conjure will automatically connect","title":"Brief summary of install"},{"location":"install/#next-steps","text":"Learn how to use Neovim and how to use Conjure for REPL driven development","title":"Next Steps"},{"location":"install/#clojure","text":"Conjure is the main Neovim plugin for Clojure, providing a REPL driven development workflow. A Java OpenJDK install (e.g. Eclipse Temurin , AWS corretto ) is required to host Clojure applications. Clojure CLI or Leiningen are tools that Conjure can use to start a Clojure REPL. Clojure LSP server provides static analytics for Neovim LSP client to provide live linting of code as its written, aid with code refactor actions and supporting code writing tools.","title":"Clojure"},{"location":"install/#neovim","text":"Neovim 7 is the latest release and is recommended. Or an Neovim pre-release or nightly build if you are feeling more adventurous.","title":"Neovim"},{"location":"install/clojure/","text":"Install Clojure A rich Clojure REPL workflow is provided by the Conjure package, which works with Clojure CLI and Leiningen projects, assuming the respective tool is installed. Clojure LSP is highly recommended and packages to use an installed clojure-lsp tool are the practicalli/neovim-config configuration Clojure CLI Clojure CLI provides a way to run Clojure code, a packaged application (jar) and of course a REPL. Adding community tools provides a configurable experience to support your Clojure development workflow. practicalli/clojure-deps-edn provides a wide range of tools that can easily be added to the development environment and used across all projects Practicalli Clojure has a detailed guide to installing Clojure and related tools for an enhanced developer workflow . Or visit the Clojure Getting Started guide for just the Clojure CLI. Clojure LSP clj-kondo provides static analysis of source code files, providing subtle warnings as Clojure code is written to help the developer follow idioms and avoid syntatic errors. Clojure LSP includes clj-kondo to provide an implementation of the Language Server Protocol for the Clojure Language . Neovim can use and visualise information from the Clojure LSP server to assist with the development and refactor of Clojure code. Follow the Clojure LSP installation guide Once installed, run clojure-lsp -v in a terminal to ensure the command is working. Leinigen The large majority of existing Clojure projects have used Leiningen build automation tool (although there is a growing number of new projects using Clojure CLI as well or instead of Leiningen) Follow the install instructions at Leiningen.org","title":"Install Clojure"},{"location":"install/clojure/#install-clojure","text":"A rich Clojure REPL workflow is provided by the Conjure package, which works with Clojure CLI and Leiningen projects, assuming the respective tool is installed. Clojure LSP is highly recommended and packages to use an installed clojure-lsp tool are the practicalli/neovim-config configuration","title":"Install Clojure"},{"location":"install/clojure/#clojure-cli","text":"Clojure CLI provides a way to run Clojure code, a packaged application (jar) and of course a REPL. Adding community tools provides a configurable experience to support your Clojure development workflow. practicalli/clojure-deps-edn provides a wide range of tools that can easily be added to the development environment and used across all projects Practicalli Clojure has a detailed guide to installing Clojure and related tools for an enhanced developer workflow . Or visit the Clojure Getting Started guide for just the Clojure CLI.","title":"Clojure CLI"},{"location":"install/clojure/#clojure-lsp","text":"clj-kondo provides static analysis of source code files, providing subtle warnings as Clojure code is written to help the developer follow idioms and avoid syntatic errors. Clojure LSP includes clj-kondo to provide an implementation of the Language Server Protocol for the Clojure Language . Neovim can use and visualise information from the Clojure LSP server to assist with the development and refactor of Clojure code. Follow the Clojure LSP installation guide Once installed, run clojure-lsp -v in a terminal to ensure the command is working.","title":"Clojure LSP"},{"location":"install/clojure/#leinigen","text":"The large majority of existing Clojure projects have used Leiningen build automation tool (although there is a growing number of new projects using Clojure CLI as well or instead of Leiningen) Follow the install instructions at Leiningen.org","title":"Leinigen"},{"location":"install/configuration/","text":"Neovim Configuration practicalli/neovim-config-redux provides a complete Fennel based configuraion for Neovim, with a wide range of plugins and associated setup and key bindings. Clone practicalli/neovim-config-redux to ~/.config directory (or a preferred location and create a symbolic link). git clone https://github.com/practicalli/neovim-config-redux.git Create a fork of practicalli/neovim-config-redux first if intending to customise this configuration init.lua bootstraps the aniseed package which compiles the Fennel configuration into Lua, which is then read by Neovim. Defines the entry point to the Fennel configuration as fnl/config/init.fnl installs ( packer.nvim ) for package management fnl/config/init.fnl load plugin configuration namespace config.plugin load config.util namespace to streamline key binding definitions set the leader key as space and local-leader as , define key bindings - uses config.util (mapping to be moved to their own namespace) set global Neovim options fnl/config/plugin.fnl Define plugins to add functionality to Neovim. use is a private function that searches the plugin configuration map for the keyword :mod and loads the associated namespace (namespace defined with a keyword with the same name) e.g. in the telescope plugin configuration :mod has a value of :telescope which will load the file fnl/config/plugin/telescope.fnl :nvim-telescope/telescope.nvim { :requires [ :nvim-lua/popup.nvim :nvim-lua/plenary.nvim ] :mod :telescope } Packer downloads the nvim-telescope/telescope.nvim plugin and all the plugins in :requires section and search for the namespace telescope in file located in the following path fnl/config/plugin/telescope fnl/config/plugin/conjure.fnl Conjure specifics settings TODO: review the Conjure configuration options fnl/config/plugin/telescope.fnl Settings like ignore node_modules and everything in .gitignore to be listed in the file finder. Defines a ripgrep command to set parameters for searching files Add --hidden to see all dotfiles (regardless of .gitignore patterns) Keymaps: - <leader>ff open the find files - <leader>fg open the fuzzy finder - <leader>fb open the find open buffer - <leader>fh open the nvim help fuzzy finder fnl/config/plugin/treesitter.fnl Defines which language parsers and modules to use. automatically use clojure , fennel and markdown parsers (and compile on first run of Neovim) automatically update language parsers when nvim-treesitter plugin updated enable highlight module enable indent module ( treesitter.setup { :ensure_installed [ \"clojure\" \"fennel\" \"markdown\" ] :sync_install true :highlight { :enable true } :indent { :enable true }}) fnl/config/plugin/lspconfig.fnl Language Server Protocol for static analysis of code, to provide common formatting, linting and refactoring tooling across all programming languages. Define which symbols to show for lsp diagnostics ( defn define-signs [ prefix ] ( let [ error ( .. prefix \"SignError\" ) warn ( .. prefix \"SignWarn\" ) info ( .. prefix \"SignInfo\" ) hint ( .. prefix \"SignHint\" )] ( vim.fn.sign_define error { :text \"\uf057\" :texthl error }) ( vim.fn.sign_define warn { :text \"\uf071\" :texthl warn }) ( vim.fn.sign_define info { :text \"\uf05a\" :texthl info }) ( vim.fn.sign_define hint { :text \"\uf059\" :texthl hint }))) features and server settings to enable/customize. Handler defines features and how we want to render the server outputs. Capabilities we link with our autocompletion plugin (nvim-cmp), to say to the lsp servers that we have this feature enabled. On_Attach we customize our interaction with the LSP server, here we define the following keymaps: configure all settings above in clojure-lsp server instance. fnl/config/plugin/cmp.fnl Configure sources to show in the autocomple menu (i.e. conjure, lsp, buffer) and key bindings to navigate the autocomplete popup menu. fnl/config/plugin/theme.fnl Add the Neovim GitHub theme which gives 3 dark and 3 light themes to choose from. Individual colors and styles can be configured to change specific parts of the theme. The light theme is used by default, with a custom softer background colour that is slightly red-shifted. Options are specified in the theme.setup function, where the option names are keywords and the values are strings, boolean or hash-map of more option keywords and values. (theme.setup {:theme_style \"light\" :colors {:bg \"#f8f2e6\"} :comment_style \"italic\"}) The colors (Hex values) for each theme are in the github-nvim-theme/lua/github-theme/palette with the overal theme definition in github-nvim-theme/lua/github-theme/theme.lua fnl/config/plugin/sexp.fnl Settings for vim-sexp like enabling it for another lisp languages like Fennel and Jannet fnl/config/plugin/lualine.fnl Configure the status line (lualine) that shows at the bottom of Neovim, defining colors and elements that appear on that line. The Neovim GitHub theme includes definitions to set the look of the status line.","title":"Neovim Configuration"},{"location":"install/configuration/#neovim-configuration","text":"practicalli/neovim-config-redux provides a complete Fennel based configuraion for Neovim, with a wide range of plugins and associated setup and key bindings. Clone practicalli/neovim-config-redux to ~/.config directory (or a preferred location and create a symbolic link). git clone https://github.com/practicalli/neovim-config-redux.git Create a fork of practicalli/neovim-config-redux first if intending to customise this configuration","title":"Neovim Configuration"},{"location":"install/configuration/#initlua","text":"bootstraps the aniseed package which compiles the Fennel configuration into Lua, which is then read by Neovim. Defines the entry point to the Fennel configuration as fnl/config/init.fnl installs ( packer.nvim ) for package management","title":"init.lua"},{"location":"install/configuration/#fnlconfiginitfnl","text":"load plugin configuration namespace config.plugin load config.util namespace to streamline key binding definitions set the leader key as space and local-leader as , define key bindings - uses config.util (mapping to be moved to their own namespace) set global Neovim options","title":"fnl/config/init.fnl"},{"location":"install/configuration/#fnlconfigpluginfnl","text":"Define plugins to add functionality to Neovim. use is a private function that searches the plugin configuration map for the keyword :mod and loads the associated namespace (namespace defined with a keyword with the same name) e.g. in the telescope plugin configuration :mod has a value of :telescope which will load the file fnl/config/plugin/telescope.fnl :nvim-telescope/telescope.nvim { :requires [ :nvim-lua/popup.nvim :nvim-lua/plenary.nvim ] :mod :telescope } Packer downloads the nvim-telescope/telescope.nvim plugin and all the plugins in :requires section and search for the namespace telescope in file located in the following path fnl/config/plugin/telescope","title":"fnl/config/plugin.fnl"},{"location":"install/configuration/#fnlconfigpluginconjurefnl","text":"Conjure specifics settings TODO: review the Conjure configuration options","title":"fnl/config/plugin/conjure.fnl"},{"location":"install/configuration/#fnlconfigplugintelescopefnl","text":"Settings like ignore node_modules and everything in .gitignore to be listed in the file finder. Defines a ripgrep command to set parameters for searching files Add --hidden to see all dotfiles (regardless of .gitignore patterns) Keymaps: - <leader>ff open the find files - <leader>fg open the fuzzy finder - <leader>fb open the find open buffer - <leader>fh open the nvim help fuzzy finder","title":"fnl/config/plugin/telescope.fnl"},{"location":"install/configuration/#fnlconfigplugintreesitterfnl","text":"Defines which language parsers and modules to use. automatically use clojure , fennel and markdown parsers (and compile on first run of Neovim) automatically update language parsers when nvim-treesitter plugin updated enable highlight module enable indent module ( treesitter.setup { :ensure_installed [ \"clojure\" \"fennel\" \"markdown\" ] :sync_install true :highlight { :enable true } :indent { :enable true }})","title":"fnl/config/plugin/treesitter.fnl"},{"location":"install/configuration/#fnlconfigpluginlspconfigfnl","text":"Language Server Protocol for static analysis of code, to provide common formatting, linting and refactoring tooling across all programming languages. Define which symbols to show for lsp diagnostics ( defn define-signs [ prefix ] ( let [ error ( .. prefix \"SignError\" ) warn ( .. prefix \"SignWarn\" ) info ( .. prefix \"SignInfo\" ) hint ( .. prefix \"SignHint\" )] ( vim.fn.sign_define error { :text \"\uf057\" :texthl error }) ( vim.fn.sign_define warn { :text \"\uf071\" :texthl warn }) ( vim.fn.sign_define info { :text \"\uf05a\" :texthl info }) ( vim.fn.sign_define hint { :text \"\uf059\" :texthl hint }))) features and server settings to enable/customize. Handler defines features and how we want to render the server outputs. Capabilities we link with our autocompletion plugin (nvim-cmp), to say to the lsp servers that we have this feature enabled. On_Attach we customize our interaction with the LSP server, here we define the following keymaps: configure all settings above in clojure-lsp server instance.","title":"fnl/config/plugin/lspconfig.fnl"},{"location":"install/configuration/#fnlconfigplugincmpfnl","text":"Configure sources to show in the autocomple menu (i.e. conjure, lsp, buffer) and key bindings to navigate the autocomplete popup menu.","title":"fnl/config/plugin/cmp.fnl"},{"location":"install/configuration/#fnlconfigpluginthemefnl","text":"Add the Neovim GitHub theme which gives 3 dark and 3 light themes to choose from. Individual colors and styles can be configured to change specific parts of the theme. The light theme is used by default, with a custom softer background colour that is slightly red-shifted. Options are specified in the theme.setup function, where the option names are keywords and the values are strings, boolean or hash-map of more option keywords and values. (theme.setup {:theme_style \"light\" :colors {:bg \"#f8f2e6\"} :comment_style \"italic\"}) The colors (Hex values) for each theme are in the github-nvim-theme/lua/github-theme/palette with the overal theme definition in github-nvim-theme/lua/github-theme/theme.lua","title":"fnl/config/plugin/theme.fnl"},{"location":"install/configuration/#fnlconfigpluginsexpfnl","text":"Settings for vim-sexp like enabling it for another lisp languages like Fennel and Jannet","title":"fnl/config/plugin/sexp.fnl"},{"location":"install/configuration/#fnlconfigpluginlualinefnl","text":"Configure the status line (lualine) that shows at the bottom of Neovim, defining colors and elements that appear on that line. The Neovim GitHub theme includes definitions to set the look of the status line.","title":"fnl/config/plugin/lualine.fnl"},{"location":"install/neovim/","text":"Install Neovim Neovim 7 is the minimum version for this configuration. The latest release of Neovim 7 has been work well for Clojure development by the Practicalli team Practicalli recommends using the latest release from the Neovim releases page Follow the install Neovim guide for the specific operating system . Update to a Neovim development build if there are issues with Treesitter and the nvim-treesitter package, as they are features under active development, e.g. Ubuntu daily builds PPA or brew install --HEAD neovim for Homebrew Post Install checks nvim in a terminal to run NeoVim and check the installation is working without error. :checkhealth to run a check supporting libraries and tools are available to NeoVim. A report is generated and shown in NeoVim j / k to scroll through the checkhealth report Review the warnings and follow any advice given to resolve the issues. Provider warnings & disable options NeoVim and it packages may delegates features to language and tool specific providers . Resolve the issue with providers that generate a warning in the checkhealth report, following the ADVICE steps. Or disable a specific provider if not required to remove the warning from the report. Details on how to disable a provider are included at the end of the ADVICE in the report section for that provider. So to disable the python provider, add let g:loaded_python3_provider = 0 to the Neovim configuration. Each NeoVim package used should be checked to see if it requires a specific provider.","title":"Install Neovim"},{"location":"install/neovim/#install-neovim","text":"Neovim 7 is the minimum version for this configuration. The latest release of Neovim 7 has been work well for Clojure development by the Practicalli team Practicalli recommends using the latest release from the Neovim releases page Follow the install Neovim guide for the specific operating system . Update to a Neovim development build if there are issues with Treesitter and the nvim-treesitter package, as they are features under active development, e.g. Ubuntu daily builds PPA or brew install --HEAD neovim for Homebrew","title":"Install Neovim"},{"location":"install/neovim/#post-install-checks","text":"nvim in a terminal to run NeoVim and check the installation is working without error. :checkhealth to run a check supporting libraries and tools are available to NeoVim. A report is generated and shown in NeoVim j / k to scroll through the checkhealth report Review the warnings and follow any advice given to resolve the issues.","title":"Post Install checks"},{"location":"install/neovim/#provider-warnings-disable-options","text":"NeoVim and it packages may delegates features to language and tool specific providers . Resolve the issue with providers that generate a warning in the checkhealth report, following the ADVICE steps. Or disable a specific provider if not required to remove the warning from the report. Details on how to disable a provider are included at the end of the ADVICE in the report section for that provider. So to disable the python provider, add let g:loaded_python3_provider = 0 to the Neovim configuration. Each NeoVim package used should be checked to see if it requires a specific provider.","title":"Provider warnings &amp; disable options"},{"location":"install/package-manager/","text":"Package Manager Packer is a use-package inspired package management for Neovim. Packer is used as the package manager in this guide as it is built on native Neovim packages and supports Luarocks dependencies, use the :help packages command in Neovim for more details. Packer is written in Lua and is installed via the init.lua configuration file, although Practicalli Neovim configuration uses Fennel to configure each package added by Packer. Install init.lua is the entry point to the configuration and is the only part that is written in Lua language. The configuration bootstraps the Packer package manager and installs the Aniseed compiler required to process the fennel configuration. Aniseed compiles and loads fnl/config/init.fnl and all the required namespaces in that file. Packer will process the use form in fnl/config/plugin.fnl and install all the packages defined in that form, along with any package specific configuration defined in that package {:mod :namespace-name} file. local execute = vim . api . nvim_command local fn = vim . fn local pack_path = fn . stdpath ( \"data\" ) .. \"/site/pack\" local fmt = string.format function ensure ( user , repo ) -- Ensures a given github.com/USER/REPO is cloned in the pack/packer/start directory. local install_path = fmt ( \"%s/packer/start/%s\" , pack_path , repo , repo ) if fn . empty ( fn . glob ( install_path )) > 0 then execute ( fmt ( \"!git clone https://github.com/%s/%s %s\" , user , repo , install_path )) execute ( fmt ( \"packadd %s\" , repo )) end end -- Bootstrap essential plugins required for installing and loading the rest. ensure ( \"wbthomason\" , \"packer.nvim\" ) ensure ( \"Olical\" , \"aniseed\" ) -- Enable Aniseed's automatic compilation and loading of Fennel source code. vim . g [ \"aniseed#env\" ] = { module = \"config.init\" , compile = true } Packages Neovim packages add extra functionality to Neovim, e.g. conjure package provides an excellent Clojure REPL experience (and supports several other languages too). See the packages section for details of the packages used and a breakdown of their configuration.","title":"Package Manager"},{"location":"install/package-manager/#package-manager","text":"Packer is a use-package inspired package management for Neovim. Packer is used as the package manager in this guide as it is built on native Neovim packages and supports Luarocks dependencies, use the :help packages command in Neovim for more details. Packer is written in Lua and is installed via the init.lua configuration file, although Practicalli Neovim configuration uses Fennel to configure each package added by Packer.","title":"Package Manager"},{"location":"install/package-manager/#install","text":"init.lua is the entry point to the configuration and is the only part that is written in Lua language. The configuration bootstraps the Packer package manager and installs the Aniseed compiler required to process the fennel configuration. Aniseed compiles and loads fnl/config/init.fnl and all the required namespaces in that file. Packer will process the use form in fnl/config/plugin.fnl and install all the packages defined in that form, along with any package specific configuration defined in that package {:mod :namespace-name} file. local execute = vim . api . nvim_command local fn = vim . fn local pack_path = fn . stdpath ( \"data\" ) .. \"/site/pack\" local fmt = string.format function ensure ( user , repo ) -- Ensures a given github.com/USER/REPO is cloned in the pack/packer/start directory. local install_path = fmt ( \"%s/packer/start/%s\" , pack_path , repo , repo ) if fn . empty ( fn . glob ( install_path )) > 0 then execute ( fmt ( \"!git clone https://github.com/%s/%s %s\" , user , repo , install_path )) execute ( fmt ( \"packadd %s\" , repo )) end end -- Bootstrap essential plugins required for installing and loading the rest. ensure ( \"wbthomason\" , \"packer.nvim\" ) ensure ( \"Olical\" , \"aniseed\" ) -- Enable Aniseed's automatic compilation and loading of Fennel source code. vim . g [ \"aniseed#env\" ] = { module = \"config.init\" , compile = true }","title":"Install"},{"location":"install/package-manager/#packages","text":"Neovim packages add extra functionality to Neovim, e.g. conjure package provides an excellent Clojure REPL experience (and supports several other languages too). See the packages section for details of the packages used and a breakdown of their configuration.","title":"Packages"},{"location":"install/packages/","text":"Add Neovim Packages Hint::WIP: Check the practicalli/neovim-config-reduct configuration Many packages have been added to the configuration and fnl/config/package.fnl is the most up to date list of packages currently used. List of packages and their purpose Package Description conjure Clojure REPL Driven Development (and other language REPLs) sexp Structured Editing newpaper theme Clean and simple UI & colour scheme, aimed at readably lualine Fast and configurable statusline nvim-treesitter Parse code highly efficiently, client for LSP servers telescope Completion tool, e.g. select files, buffers tabs, packages, etc nvim-tree Visual file manager - open, create, delete, etc. files & directories neogit Magit style visual Git client Octo Git Issues and Pull Requests gitsigns Show diff changes in buffer gutter and status line Any specific package configuration & key bindings (on sub page if significant content) Package selection criteria Packages are more likely to be adopted if: provide valuable (or fun) features work reliably, without generating errors do not conflict with other valuable packages in this configuration written in fennel or lua to aid maintenance use features provided by Neovim (e.g treesitter) are well documented are easy to configure are easy to use work well with themes (where relevant)","title":"Add Neovim Packages"},{"location":"install/packages/#add-neovim-packages","text":"","title":"Add Neovim Packages"},{"location":"install/packages/#hintwip-check-the-practicallineovim-config-reduct-configuration","text":"Many packages have been added to the configuration and fnl/config/package.fnl is the most up to date list of packages currently used. List of packages and their purpose Package Description conjure Clojure REPL Driven Development (and other language REPLs) sexp Structured Editing newpaper theme Clean and simple UI & colour scheme, aimed at readably lualine Fast and configurable statusline nvim-treesitter Parse code highly efficiently, client for LSP servers telescope Completion tool, e.g. select files, buffers tabs, packages, etc nvim-tree Visual file manager - open, create, delete, etc. files & directories neogit Magit style visual Git client Octo Git Issues and Pull Requests gitsigns Show diff changes in buffer gutter and status line Any specific package configuration & key bindings (on sub page if significant content)","title":"Hint::WIP: Check the practicalli/neovim-config-reduct configuration"},{"location":"install/packages/#package-selection-criteria","text":"Packages are more likely to be adopted if: provide valuable (or fun) features work reliably, without generating errors do not conflict with other valuable packages in this configuration written in fennel or lua to aid maintenance use features provided by Neovim (e.g treesitter) are well documented are easy to configure are easy to use work well with themes (where relevant)","title":"Package selection criteria"},{"location":"install/packages/lualine/","text":"Lualine - modeline theme nvim-lualine/lualine.nvim is a fast and configurable statusline for neovim Example status line: evil_lualine Lualine configuration in Fennel nvim/fnl/config/plugin/lualine.fnl ( module config.plugin.lualine { autoload { core aniseed.core lualine lualine lsp config.plugin.lspconfig }}) ( defn lsp_connection [] ( if ( vim.tbl_isempty ( vim.lsp.buf_get_clients 0 )) \"\uf096\" \"\uf0c8\" )) ( def github-lua-theme ( core.assoc ( require :lualine.themes.auto ) :inactive { :a { :bg \"#19181e\" :fg \"#a4a3a6\" } :b { :bg \"#19181e\" :fg \"#a4a3a6\" } :c { :bg \"#19181e\" :fg \"#a4a3a6\" }} :normal { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#3b8eea\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :command { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#ccbed8\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :visual { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#ced4b1\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :replace { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#d1b6bd\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :insert { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#a8d1c9\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }})) ( lualine.setup { :options { :theme github-lua-theme :icons_enabled true :section_separators [ \"\" \"\" ] :component_separators [ \"\uf44a\" \"\uf438\" ]} :sections { :lualine_a [] :lualine_b [[ :mode { :upper true }]] :lualine_c [[ \"FugitiveHead\" ] [ :filename { :filestatus true :path 1 }]] :lualine_x [[ :diagnostics { :sections [ :error :warn :info :hint ] :sources [ :nvim_lsp ]}] [ lsp_connection ] :location :filetype ] :lualine_y [ :encoding ] :lualine_z []} :inactive_sections { :lualine_a [] :lualine_b [] :lualine_c [[ :filename { :filestatus true :path 1 }]] :lualine_x [] :lualine_y [] :lualine_z []}})","title":"Lualine - modeline theme"},{"location":"install/packages/lualine/#lualine-modeline-theme","text":"nvim-lualine/lualine.nvim is a fast and configurable statusline for neovim Example status line: evil_lualine","title":"Lualine - modeline theme"},{"location":"install/packages/lualine/#lualine-configuration-in-fennel","text":"nvim/fnl/config/plugin/lualine.fnl ( module config.plugin.lualine { autoload { core aniseed.core lualine lualine lsp config.plugin.lspconfig }}) ( defn lsp_connection [] ( if ( vim.tbl_isempty ( vim.lsp.buf_get_clients 0 )) \"\uf096\" \"\uf0c8\" )) ( def github-lua-theme ( core.assoc ( require :lualine.themes.auto ) :inactive { :a { :bg \"#19181e\" :fg \"#a4a3a6\" } :b { :bg \"#19181e\" :fg \"#a4a3a6\" } :c { :bg \"#19181e\" :fg \"#a4a3a6\" }} :normal { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#3b8eea\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :command { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#ccbed8\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :visual { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#ced4b1\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :replace { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#d1b6bd\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }} :insert { :a { :bg \"#131217\" :fg \"#24292e\" } :b { :bg \"#131217\" :fg \"#a8d1c9\" } :c { :bg \"#19181e\" :fg \"#d1d5da\" }})) ( lualine.setup { :options { :theme github-lua-theme :icons_enabled true :section_separators [ \"\" \"\" ] :component_separators [ \"\uf44a\" \"\uf438\" ]} :sections { :lualine_a [] :lualine_b [[ :mode { :upper true }]] :lualine_c [[ \"FugitiveHead\" ] [ :filename { :filestatus true :path 1 }]] :lualine_x [[ :diagnostics { :sections [ :error :warn :info :hint ] :sources [ :nvim_lsp ]}] [ lsp_connection ] :location :filetype ] :lualine_y [ :encoding ] :lualine_z []} :inactive_sections { :lualine_a [] :lualine_b [] :lualine_c [[ :filename { :filestatus true :path 1 }]] :lualine_x [] :lualine_y [] :lualine_z []}})","title":"Lualine configuration in Fennel"},{"location":"install/packages/nvim-treesitter/","text":"Nvim Treesitter Treesitter provides language specific parsing, highlight and indent features and so is a fundamental plugin to use with Neovim. clojure , fennel , markdown and org parsers are automatically installed in the practicalli/neovim-config-redux configuration. :TSInstallInfo lists language parsers and install status :TSUpdate {language} to update a parser to the latest compatible version (specified in nvim-treesitter lockfile.json). :TSInstall {language} compiles and installs a parser for the given language. :TSUpdateSync to update all parsers to the latest available versions nvim-treesitter configuration clojure , fennel , markdown and org parsers are automatically installed if not already available. :sync_install true automatically updates the parsers when the nvim-treesitter plugin is updated. Treesitter and its parsers are actively developed, so its important to ensure parsers are kept up to date. This is the equivalent of manually running :TSUpdateSync . Parser highlight and indent modules are enabled by default In fnl/config/plugin/treesitter.fnl ( module config.plugin.treesitter { autoload { treesitter nvim-treesitter.configs }}) ( treesitter.setup { :ensure_installed [ \"clojure\" \"fennel\" \"markdown\" \"org\" ] :sync_install true :highlight { :enable true } :indent { :enable true }}) Manually Install Parsers nvim-treesitter provides the TSInstall command to generate a parser for a specific language, assuming that language is supported. A compiler (gcc, clang, etc) should be installed in the operating system on which nvim is running :TSInstall {language} TAB completion lists the available language parsers, TAB and S-TAB to navigate the auto-completion popup.","title":"Nvim Treesitter"},{"location":"install/packages/nvim-treesitter/#nvim-treesitter","text":"Treesitter provides language specific parsing, highlight and indent features and so is a fundamental plugin to use with Neovim. clojure , fennel , markdown and org parsers are automatically installed in the practicalli/neovim-config-redux configuration. :TSInstallInfo lists language parsers and install status :TSUpdate {language} to update a parser to the latest compatible version (specified in nvim-treesitter lockfile.json). :TSInstall {language} compiles and installs a parser for the given language. :TSUpdateSync to update all parsers to the latest available versions","title":"Nvim Treesitter"},{"location":"install/packages/nvim-treesitter/#nvim-treesitter-configuration","text":"clojure , fennel , markdown and org parsers are automatically installed if not already available. :sync_install true automatically updates the parsers when the nvim-treesitter plugin is updated. Treesitter and its parsers are actively developed, so its important to ensure parsers are kept up to date. This is the equivalent of manually running :TSUpdateSync . Parser highlight and indent modules are enabled by default In fnl/config/plugin/treesitter.fnl ( module config.plugin.treesitter { autoload { treesitter nvim-treesitter.configs }}) ( treesitter.setup { :ensure_installed [ \"clojure\" \"fennel\" \"markdown\" \"org\" ] :sync_install true :highlight { :enable true } :indent { :enable true }})","title":"nvim-treesitter configuration"},{"location":"install/packages/nvim-treesitter/#manually-install-parsers","text":"nvim-treesitter provides the TSInstall command to generate a parser for a specific language, assuming that language is supported. A compiler (gcc, clang, etc) should be installed in the operating system on which nvim is running :TSInstall {language} TAB completion lists the available language parsers, TAB and S-TAB to navigate the auto-completion popup.","title":"Manually Install Parsers"},{"location":"introduction/features/","text":"Main features of Practicalli Neovim A clean UI provides for a distraction free development experience, with only the essential information presented in the Neovim statusline or inline with the code [conjure] automatic Clojure REPL connection if nREPL process is running for a project [cmp & lsp] language auto-completion and snippet support [lsp] inline lint feedback whilst typing, references and unit test coverage [lualine] statusline with LSP status, diff changes, filetype, cursor position [telescope] completion of files, packages, colorschemes, etc [nvim-tree] visual file system navigation [gitsigns] gutter indicators for changed lines [todo comments] todo, fix, notes, indicators with gutter icons relative line numbers for vim-style navigation Conjure An interactive environment for evaluating code, e.g. a Clojure REPL. Conjure automatically connects to an nREPL process running in the current project. Evaluate Clojure code as its developed for an instant feedback workflow. Language Server Protocol nvim-treesitter provides a client for LSP servers, e.g. Clojure LSP. Provides live linting feedback in the buffer browser and status line as well as language specific autocompletion Telescope Navigate files, packages and any other list of items effectively using Telescope. Git support Octo provides a rich client, similar to Magit for Emacs. Gitsigns hightlights buffer changes in the gutter Lualine shows number of Git changes in status line Fugutive package is installed, although key bindings are not configured. See :help fugitive File and directory navigation nvim-tree provides a visual file system explorer that can also create and delete files and directories Telescope File browser popup also explores the file system and in Normal mode can be used to create files and directories TODO Comments Highlight tasks, fixes, notes and dragons comments, including icons in the gutter. Use Telescope to navigate TODO comments in the current project.","title":"Features"},{"location":"introduction/features/#main-features-of-practicalli-neovim","text":"A clean UI provides for a distraction free development experience, with only the essential information presented in the Neovim statusline or inline with the code [conjure] automatic Clojure REPL connection if nREPL process is running for a project [cmp & lsp] language auto-completion and snippet support [lsp] inline lint feedback whilst typing, references and unit test coverage [lualine] statusline with LSP status, diff changes, filetype, cursor position [telescope] completion of files, packages, colorschemes, etc [nvim-tree] visual file system navigation [gitsigns] gutter indicators for changed lines [todo comments] todo, fix, notes, indicators with gutter icons relative line numbers for vim-style navigation","title":"Main features of Practicalli Neovim"},{"location":"introduction/features/#conjure","text":"An interactive environment for evaluating code, e.g. a Clojure REPL. Conjure automatically connects to an nREPL process running in the current project. Evaluate Clojure code as its developed for an instant feedback workflow.","title":"Conjure"},{"location":"introduction/features/#language-server-protocol","text":"nvim-treesitter provides a client for LSP servers, e.g. Clojure LSP. Provides live linting feedback in the buffer browser and status line as well as language specific autocompletion","title":"Language Server Protocol"},{"location":"introduction/features/#telescope","text":"Navigate files, packages and any other list of items effectively using Telescope.","title":"Telescope"},{"location":"introduction/features/#git-support","text":"Octo provides a rich client, similar to Magit for Emacs. Gitsigns hightlights buffer changes in the gutter Lualine shows number of Git changes in status line Fugutive package is installed, although key bindings are not configured. See :help fugitive","title":"Git support"},{"location":"introduction/features/#file-and-directory-navigation","text":"nvim-tree provides a visual file system explorer that can also create and delete files and directories Telescope File browser popup also explores the file system and in Normal mode can be used to create files and directories","title":"File and directory navigation"},{"location":"introduction/features/#todo-comments","text":"Highlight tasks, fixes, notes and dragons comments, including icons in the gutter. Use Telescope to navigate TODO comments in the current project.","title":"TODO Comments"},{"location":"introduction/fennel/","text":"Fennel configuration Practicalli uses Fennel to define all configuration for Neovim. Fennel is a LISP dialect and should quickly become comfortable to Clojure developers. Lua is the defacto language for configuring Neovim and plugin development, although converting between Lua examples to Fennel is relatively simple. Neovim fully supports Vimscript, although it is felt that this is a relatively hard to understand way of configuring neovim and will not be used if at all possible. Fennel Important packages used in this guide are written in Fennel, especially the excellent Conjure package that provides the Clojure REPL (and support for several other language environments). Fennel is a programming language that brings together the speed, simplicity, and reach of Lua with the flexibility of a lisp syntax and macro system. Full Lua compatibility: Easily call any Lua function or library from Fennel and vice-versa. Zero overhead: Compiled code should be just as efficient as hand-written Lua. Compile-time macros: Ship compiled code with no runtime dependency on Fennel. Embeddable: Fennel is a one-file library as well as an executable. Embed it in other programs to support runtime extensibility and interactive development. Anywhere you can run Lua code, you can run Fennel code. Fennel to Lua Lua is the defacto language for writing Neovim packages, although there are more developers seeing Fennel as a viable alternative. Fennel is converted to Lua using the aniseed package Aniseed bridges the gap between Fennel (a Lisp that compiles to Lua) and Neovim . Allowing you to easily write plugins or configuration in a Clojure -like Lisp with great runtime performance. Lua to Fennel Neovim package configuration is typically provided in Lua code, so requires translation into fennel. Although this conversion should be fairly straightforward, Anti-fennel can converts Lua code into Fennel code. See Fennel is an online antifennel tool to convert between Lua and Fennel. Development tooling Neovim support aniseed - write plugins or configuration for Neovim with great runtime performance hotpot - seamless Fennel inside Neovim Emacs support: https://git.sr.ht/~technomancy/fennel-mode https://github.com/emacsmirror/fennel-mode Playing Games TIC-80 is a simulated computer environment to to write code, design art, compose music and retro style game games. L\u00d6VE is a game-making framework for the Lua programming language and can beas Fennel compiles to Lua, you can reference the L\u00d6VE wiki when making games with Fennel. L\u00d6VE is more flexible than TIC-80 in that it allows you to import from external resources and use any resolution or memory you like, but at a cost in that it is more complicated to make games in. TIC-80 and L\u00d6VE provide cross-platform support across Windows, Mac and Linux systems. TIC-80 games can also be played in the browser.","title":"Fennel"},{"location":"introduction/fennel/#fennel-configuration","text":"Practicalli uses Fennel to define all configuration for Neovim. Fennel is a LISP dialect and should quickly become comfortable to Clojure developers. Lua is the defacto language for configuring Neovim and plugin development, although converting between Lua examples to Fennel is relatively simple. Neovim fully supports Vimscript, although it is felt that this is a relatively hard to understand way of configuring neovim and will not be used if at all possible.","title":"Fennel configuration"},{"location":"introduction/fennel/#fennel","text":"Important packages used in this guide are written in Fennel, especially the excellent Conjure package that provides the Clojure REPL (and support for several other language environments). Fennel is a programming language that brings together the speed, simplicity, and reach of Lua with the flexibility of a lisp syntax and macro system. Full Lua compatibility: Easily call any Lua function or library from Fennel and vice-versa. Zero overhead: Compiled code should be just as efficient as hand-written Lua. Compile-time macros: Ship compiled code with no runtime dependency on Fennel. Embeddable: Fennel is a one-file library as well as an executable. Embed it in other programs to support runtime extensibility and interactive development. Anywhere you can run Lua code, you can run Fennel code.","title":"Fennel"},{"location":"introduction/fennel/#fennel-to-lua","text":"Lua is the defacto language for writing Neovim packages, although there are more developers seeing Fennel as a viable alternative. Fennel is converted to Lua using the aniseed package Aniseed bridges the gap between Fennel (a Lisp that compiles to Lua) and Neovim . Allowing you to easily write plugins or configuration in a Clojure -like Lisp with great runtime performance.","title":"Fennel to Lua"},{"location":"introduction/fennel/#lua-to-fennel","text":"Neovim package configuration is typically provided in Lua code, so requires translation into fennel. Although this conversion should be fairly straightforward, Anti-fennel can converts Lua code into Fennel code. See Fennel is an online antifennel tool to convert between Lua and Fennel.","title":"Lua to Fennel"},{"location":"introduction/fennel/#development-tooling","text":"Neovim support aniseed - write plugins or configuration for Neovim with great runtime performance hotpot - seamless Fennel inside Neovim Emacs support: https://git.sr.ht/~technomancy/fennel-mode https://github.com/emacsmirror/fennel-mode","title":"Development tooling"},{"location":"introduction/fennel/#playing-games","text":"TIC-80 is a simulated computer environment to to write code, design art, compose music and retro style game games. L\u00d6VE is a game-making framework for the Lua programming language and can beas Fennel compiles to Lua, you can reference the L\u00d6VE wiki when making games with Fennel. L\u00d6VE is more flexible than TIC-80 in that it allows you to import from external resources and use any resolution or memory you like, but at a cost in that it is more complicated to make games in. TIC-80 and L\u00d6VE provide cross-platform support across Windows, Mac and Linux systems. TIC-80 games can also be played in the browser.","title":"Playing Games"},{"location":"neovim-basics/","text":"Using Newovim Using the fundamental controls of Neovim that apply across any and all editing. Managing files and directories SPC f p to list files within the scope of the current directory path. SPC f f to open a file browser which can open, create and delete files and directories. :lcd to set the current local directory :! for a shell command, e.g. :!mkdir -p path/to/new/directory create a new directory and any intermediate path Manage buffers and windows SPC h / SPC l to jump to left / right buffer, SPC j / SPC k to jump to buffer below / above SPC b b to list current buffers and switch between them using telescope C-w and hjkl to navigate windows is the classic Vim approach","title":"Using Newovim"},{"location":"neovim-basics/#using-newovim","text":"Using the fundamental controls of Neovim that apply across any and all editing.","title":"Using Newovim"},{"location":"neovim-basics/#managing-files-and-directories","text":"SPC f p to list files within the scope of the current directory path. SPC f f to open a file browser which can open, create and delete files and directories. :lcd to set the current local directory :! for a shell command, e.g. :!mkdir -p path/to/new/directory create a new directory and any intermediate path","title":"Managing files and directories"},{"location":"neovim-basics/#manage-buffers-and-windows","text":"SPC h / SPC l to jump to left / right buffer, SPC j / SPC k to jump to buffer below / above SPC b b to list current buffers and switch between them using telescope C-w and hjkl to navigate windows is the classic Vim approach","title":"Manage buffers and windows"},{"location":"neovim-basics/comments/","text":"Comments commentary.vim toggles a comment for lines, visual selections or for motions gcc comment current line, 4gcc comment current line and next 4 lines gc comment region or use with motion e.g. gcap comment paragraph, gc in operator pending mode to target a comment TODO: what is operator pending mode :7,17Commentary comment a range :g/TODO/Commentary as part of a :global invocation gcgc removes comments from a set of adjacent commented lines.","title":"Comments"},{"location":"neovim-basics/comments/#comments","text":"commentary.vim toggles a comment for lines, visual selections or for motions gcc comment current line, 4gcc comment current line and next 4 lines gc comment region or use with motion e.g. gcap comment paragraph, gc in operator pending mode to target a comment TODO: what is operator pending mode :7,17Commentary comment a range :g/TODO/Commentary as part of a :global invocation gcgc removes comments from a set of adjacent commented lines.","title":"Comments"},{"location":"neovim-basics/files-buffers-windows/","text":"Buffers and Windows Buffers hold the contents of files and any other information from processes, e.g. the REPL evaluation log Windows are a container for a buffer and windows can swap which buffer they show. Multiple windows, also known as splits, can be present in a Neovim frame. By default, neovim starts with only one window. File management SPC f f to open a file, a telescope popup lists file relative to the directory Neovim was opened from (or Path subsequently set in Neovim). Telescope provides a preview of the selected file (only if there is sufficient space in the Neovim frame) SPC f b provides a file browser to open files, nacigate the filespace and create new fipes and directories SPC f b ESC C to create a new file or directory. The base path is shown in the command bar. Type the name of directories and file name as required. RTN to create or ESC to cancel. The newly created directories or file name appears n the Telescope list and scan be selected for opening. HINT::Telescope Normal mode and help ESC in Telescope to switch to Normal mode and use comannds, c for Create, r to rename. ? to show all the commands available in Telescope Buffer management SPC b b switch between buffers in the current window, using a Telescope popup that lists all current buffers (includes files, Conjure REPL Log, etc.). SPC b n ( :next ) and SPC b n ( :previous ) to cycle through buffers in the current window SPC TAB ( C-^ ) opens the previous buffer, useful to toggle between two buffers in the same window Use Telescope to switch between buffers Open multiple buffers when starting Neovim by specifying multiple files to open nvim README.md deps.edn src/practicalli/playground.clj test/practicalli/playground.clj Buffer text wrapping The test in a buffer is not wrapped by default. Set and unser soft text wrapping in a buffer :set wrap to set soft wrapping on current buffer :set nowrap to show lines in full (scroll sideways to see lines longer than the window) Neovim Window management Windows can be active (contains the cursor), hidden (open but not shown) or inactive. C-w menu to manage Windows, also known as splits. C-w with one of hjkl will move the cursor to the next window in that direction. Also works with arrow keys. C-w w toggle between open windows :q or C-w q closes the active window, closing Neovim if it is the last active window. :wincmd can be used as an alternative to the Normal mode key bindings Open file in a new window :sp relative-or-full-filename-path Resize windows C-w - , + , < or > for vertical or horizontal size adjustment","title":"Buffers and Windows"},{"location":"neovim-basics/files-buffers-windows/#buffers-and-windows","text":"Buffers hold the contents of files and any other information from processes, e.g. the REPL evaluation log Windows are a container for a buffer and windows can swap which buffer they show. Multiple windows, also known as splits, can be present in a Neovim frame. By default, neovim starts with only one window.","title":"Buffers and Windows"},{"location":"neovim-basics/files-buffers-windows/#file-management","text":"SPC f f to open a file, a telescope popup lists file relative to the directory Neovim was opened from (or Path subsequently set in Neovim). Telescope provides a preview of the selected file (only if there is sufficient space in the Neovim frame) SPC f b provides a file browser to open files, nacigate the filespace and create new fipes and directories SPC f b ESC C to create a new file or directory. The base path is shown in the command bar. Type the name of directories and file name as required. RTN to create or ESC to cancel. The newly created directories or file name appears n the Telescope list and scan be selected for opening.","title":"File management"},{"location":"neovim-basics/files-buffers-windows/#hinttelescope-normal-mode-and-help","text":"ESC in Telescope to switch to Normal mode and use comannds, c for Create, r to rename. ? to show all the commands available in Telescope","title":"HINT::Telescope Normal mode and help"},{"location":"neovim-basics/files-buffers-windows/#buffer-management","text":"SPC b b switch between buffers in the current window, using a Telescope popup that lists all current buffers (includes files, Conjure REPL Log, etc.). SPC b n ( :next ) and SPC b n ( :previous ) to cycle through buffers in the current window SPC TAB ( C-^ ) opens the previous buffer, useful to toggle between two buffers in the same window Use Telescope to switch between buffers Open multiple buffers when starting Neovim by specifying multiple files to open nvim README.md deps.edn src/practicalli/playground.clj test/practicalli/playground.clj","title":"Buffer management"},{"location":"neovim-basics/files-buffers-windows/#buffer-text-wrapping","text":"The test in a buffer is not wrapped by default. Set and unser soft text wrapping in a buffer :set wrap to set soft wrapping on current buffer :set nowrap to show lines in full (scroll sideways to see lines longer than the window)","title":"Buffer text wrapping"},{"location":"neovim-basics/files-buffers-windows/#neovim-window-management","text":"Windows can be active (contains the cursor), hidden (open but not shown) or inactive. C-w menu to manage Windows, also known as splits. C-w with one of hjkl will move the cursor to the next window in that direction. Also works with arrow keys. C-w w toggle between open windows :q or C-w q closes the active window, closing Neovim if it is the last active window. :wincmd can be used as an alternative to the Normal mode key bindings Open file in a new window :sp relative-or-full-filename-path Resize windows C-w - , + , < or > for vertical or horizontal size adjustment","title":"Neovim Window management"},{"location":"neovim-basics/git-github/","text":"Git and GitHub Version Control Neogit provides a Magit style client. fugitive package provides a command line experience (no keybinding) <leader>gs opens Git Status, by running :Neogit Other commands to map :Neogit kind=<kind> \" override kind :Neogit cwd=<cwd> \" override cwd :Neogit commit\" open commit popup GitHub interaction Work with GitHub issues and Pull Requests from the comfort of Neovim. Requires the GitHub CLI for authentication to GitHub, using a developer personal access token that should be added to your GitHub account TODO: Review Octo.nvim configuration settings Command line form: Octo <object> <action> [arguments] - Object, Action and Arguments commands List issues from current project (optionally add a specific repository) :Octo issue list Create a pull requests from current project :Octo pr create Add a comment to the current topic (issue/pr) :Octo comment add :Octo gist list","title":"Git and GitHub Version Control"},{"location":"neovim-basics/git-github/#git-and-github-version-control","text":"Neogit provides a Magit style client. fugitive package provides a command line experience (no keybinding) <leader>gs opens Git Status, by running :Neogit Other commands to map :Neogit kind=<kind> \" override kind :Neogit cwd=<cwd> \" override cwd :Neogit commit\" open commit popup","title":"Git and GitHub Version Control"},{"location":"neovim-basics/git-github/#github-interaction","text":"Work with GitHub issues and Pull Requests from the comfort of Neovim. Requires the GitHub CLI for authentication to GitHub, using a developer personal access token that should be added to your GitHub account TODO: Review Octo.nvim configuration settings Command line form: Octo <object> <action> [arguments] - Object, Action and Arguments commands List issues from current project (optionally add a specific repository) :Octo issue list Create a pull requests from current project :Octo pr create Add a comment to the current topic (issue/pr) :Octo comment add :Octo gist list","title":"GitHub interaction"},{"location":"neovim-basics/language-server-protocol/","text":"Language Server Protocol (LSP) Configuration Key maps gd Go to definition K Show documentations <leader>ld Function declarations <leader>lt Type Definitions <leader>lh Signature Help <leader>ln Rename <leader>le Show line diagnostics <leader>lq Show all diagnostics information <leader>lf Auto format <leader>lj Go to next diagnostic <leader>lk Go to previous diagnostic <leader>la Open code actions menu (Using telescope plugin interface) <leader>la Open code actions menu for the selected text in VISUAL mode (Using telescope plugin interface) <leader>lw Open workspace diagnostics list (Using telescope plugin interface) <leader>lr Show all references list for item under the cursor (Using telescope plugin interface) <leader>lr Show all implementations list for item under the cursor (Using telescope plugin interface)","title":"Language Server Protocol (LSP) Configuration"},{"location":"neovim-basics/language-server-protocol/#language-server-protocol-lsp-configuration","text":"","title":"Language Server Protocol (LSP) Configuration"},{"location":"neovim-basics/language-server-protocol/#key-maps","text":"gd Go to definition K Show documentations <leader>ld Function declarations <leader>lt Type Definitions <leader>lh Signature Help <leader>ln Rename <leader>le Show line diagnostics <leader>lq Show all diagnostics information <leader>lf Auto format <leader>lj Go to next diagnostic <leader>lk Go to previous diagnostic <leader>la Open code actions menu (Using telescope plugin interface) <leader>la Open code actions menu for the selected text in VISUAL mode (Using telescope plugin interface) <leader>lw Open workspace diagnostics list (Using telescope plugin interface) <leader>lr Show all references list for item under the cursor (Using telescope plugin interface) <leader>lr Show all implementations list for item under the cursor (Using telescope plugin interface)","title":"Key maps"},{"location":"neovim-basics/multiple-cursors/","text":"Multiple cursors Visual-Multi (VM) is a multiple selections/cursors plugin that uses modal editing and provide visual feedback when editing multiple lines simultaneously. Mulitple cursors is generally useful when editing smilarly structured lines with diffferent content. Cursors are moved by column position or by using vim motions. \\ \\ c creates a cursor at the start of every visual selection line \\ \\ \\ toggle cursor at position Command quick reference \\ \\ is the leader for multiple cursors and will show the visual-multi menu in which-key. These commands cover the large majority of use cases for multiple cursors. :help g:VM_maps for a reference of all mappings and instructions on how to change them Action Key Command Add Cursor at Position \\\\\\ vm-add-cursor Alignm VM cursors with cursor \\\\a vm-align Select All Words \\\\A vm-select-all Transposition \\\\t vm-transpose Toggle Mappings \\\\<Space> vm-mappings-toggle Find with Regex \\\\/ vm-regex-search Reselect Last \\\\gS vm-reselect-last Once visual-multi has started the vm-mappings-buffer mappings are available: Action Key Command Find Word <C-n> vm-find-word Next/Previous/Skip n / N / q vm-find-next Remove Region Q vm-remove-region Add Cursors Down/Up <C-Down> / <C-Up> vm-add-cursors Select Right/Left <S-Right> , <S-Left> vm-shift-select Slash motion g/ vm-slash Select Operator s vm-select-operator Find Operator m vm-find-operator NOTE: C-n conflicts with the Termux binding for naming a session Searching g/ to search for a match to add when visual-multi is active, rather than the usual / vim search. n and N can't be used to repeat the search, as they are used to get the next visual-multi match. Find with Regex \\ \\ / followed by a regex pattern will create a selection with that pattern. n and N finds the next occurrence of the regex pattern Smart case change gc In extend-mode will use smartcase to change a selection at main cursor, text is always inserted as typed at other cursors, if region text was fully uppercased, replacement will be uppercased as well if the region text was capitalized, the replacement will be as well Filter regions \\ \\ f filter out (remove) regions based on pattern or expression. C-x to cycle filtering method: pattern: remove regions that don't match the pattern !pattern: remove regions that match the pattern expression: remove regions that don't match the expression (same as below) Transform regions with expression \\ \\ e to transform a region with a vim expression, run on each region Placeholders can be used in the expression `%t~ region's text as a string (as-is) `%f~ region's text evaluated as a floating point number `%n~ region's text evaluated as an integer number `%i~ region's index `%N~ total number of regions Examples: - %f * 0.5 divide text of all regions by 2 - %t .\" \". %i .\" / \". %n append index / total to text of each region - %i%2 ? %t : toupper(%t) uppercase all odd regions (1,3,5...) - %i%3-2 ? %t : '' delete every third region VM Motions visual-multi supports vim motions although they behave differently as their result is dependent on the mode: cursor mode will move cursors extend mode motions extend selections Unless multiline-mode is enabled motions are restricted to the current line and cannot cross line boundaries Some object-motions and various-motions require multiline-mode and aliased to avoid conflict with VM mappings: vim VM~ Description / g/ to next match (for all regions) ( ( [count] sentences backward ) ) [count] sentences forward { { [count] paragraphs backward } } [count] paragraphs forward [( g( go to [count] previous unmatched '(' [{ g{ go to [count] previous unmatched '{' ]) g) go to [count] next unmatched ')' ]} g} go to [count] next unmatched '}' vm-operators Visual-Multi supports several operators by default: y / d / c to yank / delete / change gu / gU to change text case Visual-Multi uses its own registers that are lists of strings. One element for each region that is yanked/deleted. There is also built-in support for: vim-surround e.g. ysiw( to enclose in parentheses vim-abolish e.g. cr_ to change current word to snake case `:help g:VM_user_operators to disccover how to doefine other operators vm-multiline-mode In normal and insert mode, cursors and selections are kept within their own line. Cursors are blocked from moving off the current line to the next line. M enables multiline-mode that allows cuursors to move onto another line. Multiline mode must be enabled for an object motions, or they will fail. See |vm-motions|. Alignment \\\\a aligns by setting the minimum column to the highest of all regions \\\\< aligns by character, or [count] characters \\\\> aligns by regex pattern In extend-mode selections are collapsed to cursors first, although will work regardless. Replace pattern in regions R to replace with a pattern and then the replacement text substitution will take place in all selected regions, leaving unselected text untouched. Only working in |extend-mode|. When |R| is pressed in |cursor-mode|, it will start |vm-replace-mode| instead. Subtract pattern from regions \\\\s subtract the entered pattern from regions, splitting them. Only working in |extend-mode|. Transposition \\ \\ t swaps the contents of selections, cycling them if there are more than two. If there is an equal number of selections in each line, swapping takes place within the same line only. Only in |extend-mode|. Duplication \\ \\ d duplicates in place the contents of the selections, reselecting the original ones. Only in extend-mode. Shift Selections and move the selections right or left, preserving the surroundings. Case conversion \\\\C runs on inner words in cursor mode u lowercase U UPPERCASE C Captialize t Title Case c camelCase P PascalCase s snake_case S SNAKE_UPPERCASE - dash-case . dot.case <space> space case Modes cursor-mode and extend-mode are two Visual-Multi modes, roughly corresponding to normal-mode and visual-mode TAB switches between cursor-mode and extended-mode VM Cursor Mode cursor-mode commands expect a motion, e.g. c should be followed by a text object to be changed. | operators | see vm-operators | | motions | see vm-motions | | | | set column for all cursors (to current column or [count]) | | r | replace single character | | R | enter vm-replace-mode | | ~ | change case of single character | | & | repeat last substitution | | <C-A> | increase numbers | | <C-X> | decrease numbers | | g<C-A> | progressively increase numbers ( v_g_CTRL-A ) | | g<C-X> | progressively decrease numbers ( v_g_CTRL-X ) | You can enter |insert-mode| with i , I , a , A , and only from cursor mode also with o and O . Also see vm-motions for supported motions in VM (some with differences). VM Extend Mode extend-mode is like having multiple visual selections. motions extend the slections and change / yank / delete commands don't wait for a motion, just like in visual mode. Even the key o works as in visual mode, inverting the anchor of the selections. Some commands are specific to |extend-mode|, such as: s vim-surround R replace pattern in regions \\\\s split regions by pattern \\\\e transform regions text with vim expression Some commands enforce cursor-mode when run from extend-mode : <C-A> increase numbers <C-X> decrease numbers Others can use a different mapping: gu/gU change case (instead of vim u / U ) o and O mappings are used to invert the facing of the selected regions and not to start insert mode.","title":"Multiple cursors"},{"location":"neovim-basics/multiple-cursors/#multiple-cursors","text":"Visual-Multi (VM) is a multiple selections/cursors plugin that uses modal editing and provide visual feedback when editing multiple lines simultaneously. Mulitple cursors is generally useful when editing smilarly structured lines with diffferent content. Cursors are moved by column position or by using vim motions. \\ \\ c creates a cursor at the start of every visual selection line \\ \\ \\ toggle cursor at position","title":"Multiple cursors"},{"location":"neovim-basics/multiple-cursors/#command-quick-reference","text":"\\ \\ is the leader for multiple cursors and will show the visual-multi menu in which-key. These commands cover the large majority of use cases for multiple cursors. :help g:VM_maps for a reference of all mappings and instructions on how to change them Action Key Command Add Cursor at Position \\\\\\ vm-add-cursor Alignm VM cursors with cursor \\\\a vm-align Select All Words \\\\A vm-select-all Transposition \\\\t vm-transpose Toggle Mappings \\\\<Space> vm-mappings-toggle Find with Regex \\\\/ vm-regex-search Reselect Last \\\\gS vm-reselect-last Once visual-multi has started the vm-mappings-buffer mappings are available: Action Key Command Find Word <C-n> vm-find-word Next/Previous/Skip n / N / q vm-find-next Remove Region Q vm-remove-region Add Cursors Down/Up <C-Down> / <C-Up> vm-add-cursors Select Right/Left <S-Right> , <S-Left> vm-shift-select Slash motion g/ vm-slash Select Operator s vm-select-operator Find Operator m vm-find-operator NOTE: C-n conflicts with the Termux binding for naming a session","title":"Command quick reference"},{"location":"neovim-basics/multiple-cursors/#searching","text":"g/ to search for a match to add when visual-multi is active, rather than the usual / vim search. n and N can't be used to repeat the search, as they are used to get the next visual-multi match.","title":"Searching"},{"location":"neovim-basics/multiple-cursors/#find-with-regex","text":"\\ \\ / followed by a regex pattern will create a selection with that pattern. n and N finds the next occurrence of the regex pattern","title":"Find with Regex"},{"location":"neovim-basics/multiple-cursors/#smart-case-change","text":"gc In extend-mode will use smartcase to change a selection at main cursor, text is always inserted as typed at other cursors, if region text was fully uppercased, replacement will be uppercased as well if the region text was capitalized, the replacement will be as well","title":"Smart case change"},{"location":"neovim-basics/multiple-cursors/#filter-regions","text":"\\ \\ f filter out (remove) regions based on pattern or expression. C-x to cycle filtering method: pattern: remove regions that don't match the pattern !pattern: remove regions that match the pattern expression: remove regions that don't match the expression (same as below)","title":"Filter regions"},{"location":"neovim-basics/multiple-cursors/#transform-regions-with-expression","text":"\\ \\ e to transform a region with a vim expression, run on each region Placeholders can be used in the expression `%t~ region's text as a string (as-is) `%f~ region's text evaluated as a floating point number `%n~ region's text evaluated as an integer number `%i~ region's index `%N~ total number of regions Examples: - %f * 0.5 divide text of all regions by 2 - %t .\" \". %i .\" / \". %n append index / total to text of each region - %i%2 ? %t : toupper(%t) uppercase all odd regions (1,3,5...) - %i%3-2 ? %t : '' delete every third region","title":"Transform regions with expression"},{"location":"neovim-basics/multiple-cursors/#vm-motions","text":"visual-multi supports vim motions although they behave differently as their result is dependent on the mode: cursor mode will move cursors extend mode motions extend selections Unless multiline-mode is enabled motions are restricted to the current line and cannot cross line boundaries Some object-motions and various-motions require multiline-mode and aliased to avoid conflict with VM mappings: vim VM~ Description / g/ to next match (for all regions) ( ( [count] sentences backward ) ) [count] sentences forward { { [count] paragraphs backward } } [count] paragraphs forward [( g( go to [count] previous unmatched '(' [{ g{ go to [count] previous unmatched '{' ]) g) go to [count] next unmatched ')' ]} g} go to [count] next unmatched '}'","title":"VM Motions"},{"location":"neovim-basics/multiple-cursors/#vm-operators","text":"Visual-Multi supports several operators by default: y / d / c to yank / delete / change gu / gU to change text case Visual-Multi uses its own registers that are lists of strings. One element for each region that is yanked/deleted. There is also built-in support for: vim-surround e.g. ysiw( to enclose in parentheses vim-abolish e.g. cr_ to change current word to snake case `:help g:VM_user_operators to disccover how to doefine other operators","title":"vm-operators"},{"location":"neovim-basics/multiple-cursors/#vm-multiline-mode","text":"In normal and insert mode, cursors and selections are kept within their own line. Cursors are blocked from moving off the current line to the next line. M enables multiline-mode that allows cuursors to move onto another line. Multiline mode must be enabled for an object motions, or they will fail. See |vm-motions|.","title":"vm-multiline-mode"},{"location":"neovim-basics/multiple-cursors/#alignment","text":"\\\\a aligns by setting the minimum column to the highest of all regions \\\\< aligns by character, or [count] characters \\\\> aligns by regex pattern In extend-mode selections are collapsed to cursors first, although will work regardless.","title":"Alignment"},{"location":"neovim-basics/multiple-cursors/#replace-pattern-in-regions","text":"R to replace with a pattern and then the replacement text substitution will take place in all selected regions, leaving unselected text untouched. Only working in |extend-mode|. When |R| is pressed in |cursor-mode|, it will start |vm-replace-mode| instead.","title":"Replace pattern in regions"},{"location":"neovim-basics/multiple-cursors/#subtract-pattern-from-regions","text":"\\\\s subtract the entered pattern from regions, splitting them. Only working in |extend-mode|.","title":"Subtract pattern from regions"},{"location":"neovim-basics/multiple-cursors/#transposition","text":"\\ \\ t swaps the contents of selections, cycling them if there are more than two. If there is an equal number of selections in each line, swapping takes place within the same line only. Only in |extend-mode|.","title":"Transposition"},{"location":"neovim-basics/multiple-cursors/#duplication","text":"\\ \\ d duplicates in place the contents of the selections, reselecting the original ones. Only in extend-mode.","title":"Duplication"},{"location":"neovim-basics/multiple-cursors/#shift-selections","text":"and move the selections right or left, preserving the surroundings.","title":"Shift Selections"},{"location":"neovim-basics/multiple-cursors/#case-conversion","text":"\\\\C runs on inner words in cursor mode u lowercase U UPPERCASE C Captialize t Title Case c camelCase P PascalCase s snake_case S SNAKE_UPPERCASE - dash-case . dot.case <space> space case","title":"Case conversion"},{"location":"neovim-basics/multiple-cursors/#modes","text":"cursor-mode and extend-mode are two Visual-Multi modes, roughly corresponding to normal-mode and visual-mode TAB switches between cursor-mode and extended-mode","title":"Modes"},{"location":"neovim-basics/multiple-cursors/#vm-cursor-mode","text":"cursor-mode commands expect a motion, e.g. c should be followed by a text object to be changed. | operators | see vm-operators | | motions | see vm-motions | | | | set column for all cursors (to current column or [count]) | | r | replace single character | | R | enter vm-replace-mode | | ~ | change case of single character | | & | repeat last substitution | | <C-A> | increase numbers | | <C-X> | decrease numbers | | g<C-A> | progressively increase numbers ( v_g_CTRL-A ) | | g<C-X> | progressively decrease numbers ( v_g_CTRL-X ) | You can enter |insert-mode| with i , I , a , A , and only from cursor mode also with o and O . Also see vm-motions for supported motions in VM (some with differences).","title":"VM Cursor Mode"},{"location":"neovim-basics/multiple-cursors/#vm-extend-mode","text":"extend-mode is like having multiple visual selections. motions extend the slections and change / yank / delete commands don't wait for a motion, just like in visual mode. Even the key o works as in visual mode, inverting the anchor of the selections. Some commands are specific to |extend-mode|, such as: s vim-surround R replace pattern in regions \\\\s split regions by pattern \\\\e transform regions text with vim expression Some commands enforce cursor-mode when run from extend-mode : <C-A> increase numbers <C-X> decrease numbers Others can use a different mapping: gu/gU change case (instead of vim u / U ) o and O mappings are used to invert the facing of the selected regions and not to start insert mode.","title":"VM Extend Mode"},{"location":"neovim-basics/package-management/","text":"Manage packages with Packer Some Neovim packages are quite new, especially those using treesitter. It is recommended to update the packages if there are issue or when a newer version of Neovim has been released SPC P u to update packages to their latest versions ( :PackerUpdate ). Details of updated changes will be shown at the end of the update. r in the package update screen gives the option to revert an update if something has gone wrong (although this seem to be a rare issue). When packages are all at the latest available version, Packer update reports packages already up to date. Packer downloads packages and documentation from the Internet, so a connection is required Package List and documentation SPC P l to list the current packages added to the configuration Selecting a package will display the website documentation for the package (although this may be in HTML so not the cleanest way to read the docs). Adding packages Add package names as keywords in the use expression in fnl/config/plugin.fnl file. :requires to add a package that is a dependency for the package being added :mod defines the namespace that contains the package configuration, typically a setup function with options. The namespace matches the file name under fnl/config/plugin SPC P i to install packages that have been added to fnl/config/plugin.fnl q to quit once all packages are up to date","title":"Manage packages with Packer"},{"location":"neovim-basics/package-management/#manage-packages-with-packer","text":"Some Neovim packages are quite new, especially those using treesitter. It is recommended to update the packages if there are issue or when a newer version of Neovim has been released SPC P u to update packages to their latest versions ( :PackerUpdate ). Details of updated changes will be shown at the end of the update. r in the package update screen gives the option to revert an update if something has gone wrong (although this seem to be a rare issue). When packages are all at the latest available version, Packer update reports packages already up to date. Packer downloads packages and documentation from the Internet, so a connection is required","title":"Manage packages with Packer"},{"location":"neovim-basics/package-management/#package-list-and-documentation","text":"SPC P l to list the current packages added to the configuration Selecting a package will display the website documentation for the package (although this may be in HTML so not the cleanest way to read the docs).","title":"Package List and documentation"},{"location":"neovim-basics/package-management/#adding-packages","text":"Add package names as keywords in the use expression in fnl/config/plugin.fnl file. :requires to add a package that is a dependency for the package being added :mod defines the namespace that contains the package configuration, typically a setup function with options. The namespace matches the file name under fnl/config/plugin SPC P i to install packages that have been added to fnl/config/plugin.fnl q to quit once all packages are up to date","title":"Adding packages"},{"location":"reference/vim-style/","text":"Reference: Learn Vim-style Editing Learning vim-style multi-modal editing takes time and practice. Most importantly this approach can be learned in stages, as insert mode is the same editing experience as using most other editors. Start with the multi-modal concept and the basics of navigation. Then adopt more normal and visual mode actions, including motions Getting started :Tutor runs the intteractive tutorial built into neovim (:help tutor also runs the tutor) vim adventures isa simple online game to teach you the fundamentals of vim-style editing. Navigation and searching moving the cursor Motions line numbers jumping around a buffer search and replace Text wrangling iedit text case Clojure Editing traversing expressions structural editing","title":"Reference: Learn Vim-style Editing"},{"location":"reference/vim-style/#reference-learn-vim-style-editing","text":"Learning vim-style multi-modal editing takes time and practice. Most importantly this approach can be learned in stages, as insert mode is the same editing experience as using most other editors. Start with the multi-modal concept and the basics of navigation. Then adopt more normal and visual mode actions, including motions","title":"Reference: Learn Vim-style Editing"},{"location":"reference/vim-style/#getting-started","text":":Tutor runs the intteractive tutorial built into neovim (:help tutor also runs the tutor) vim adventures isa simple online game to teach you the fundamentals of vim-style editing.","title":"Getting started"},{"location":"reference/vim-style/#navigation-and-searching","text":"moving the cursor Motions line numbers jumping around a buffer search and replace","title":"Navigation and searching"},{"location":"reference/vim-style/#text-wrangling","text":"iedit text case","title":"Text wrangling"},{"location":"reference/vim-style/#clojure-editing","text":"traversing expressions structural editing","title":"Clojure Editing"},{"location":"reference/vim-style/case/","text":"Modifying text case Convert Characters and regioins to upper or lower case text. Toggle case with visual select v to visually select a character or use the vim motion keys to select a region U to uppercase current character or selected region u to lowercase current character or selected region ~ to toggle the case of the text in the selected region . will repeat the previous selection size and case toggle Toggle case menu Toggle the current character using vim motion keys, without needing to select a region. g ~ opens the toggle case menu TODO: Add screenshot of g ~ toggle case menu g ~ ~ uppercase current line (also works for RET and maybe other none-menu characters, but not SPC ) Cheatsheet ~ Changes the case of current character guu Change current line from upper to lower. gUU Change current LINE from lower to upper. guw Change to end of current WORD from upper to lower. guaw Change all of current WORD to lower. gUw Change to end of current WORD from lower to upper. gUaw Change all of current WORD to upper. g~~ Invert case to entire line g~w Invert case to current WORD guG Change to lowercase until the end of document. gU) Change until end of sentence to upper case gu} Change to end of paragraph to lower case gU5j Change 5 lines below to upper case gu3k Change 3 lines above to lower case","title":"Modifying text case"},{"location":"reference/vim-style/case/#modifying-text-case","text":"Convert Characters and regioins to upper or lower case text.","title":"Modifying text case"},{"location":"reference/vim-style/case/#toggle-case-with-visual-select","text":"v to visually select a character or use the vim motion keys to select a region U to uppercase current character or selected region u to lowercase current character or selected region ~ to toggle the case of the text in the selected region . will repeat the previous selection size and case toggle","title":"Toggle case with visual select"},{"location":"reference/vim-style/case/#toggle-case-menu","text":"Toggle the current character using vim motion keys, without needing to select a region. g ~ opens the toggle case menu TODO: Add screenshot of g ~ toggle case menu g ~ ~ uppercase current line (also works for RET and maybe other none-menu characters, but not SPC )","title":"Toggle case menu"},{"location":"reference/vim-style/case/#cheatsheet","text":"~ Changes the case of current character guu Change current line from upper to lower. gUU Change current LINE from lower to upper. guw Change to end of current WORD from upper to lower. guaw Change all of current WORD to lower. gUw Change to end of current WORD from lower to upper. gUaw Change all of current WORD to upper. g~~ Invert case to entire line g~w Invert case to current WORD guG Change to lowercase until the end of document. gU) Change until end of sentence to upper case gu} Change to end of paragraph to lower case gU5j Change 5 lines below to upper case gu3k Change 3 lines above to lower case","title":"Cheatsheet"},{"location":"reference/vim-style/g-menu/","text":"Evil G menu g` in normal mode opens a menu of convenient utilities. Practicalli uses this menu to comment existing lines, jumping to top or bottom of the buffer and changing text case. Comment lines and regions g c c will comment the current line using the buffer major mode comment character(s). A prompt will ask if no comment character is set for the major mode. g c with a selected region will comment all lines with the major mode comment character(s) Jumping around g g jumps to the top of the buffer, g G to the bottom of the buffer g d to jump to the source code of a function definition, g D to open that in a different window. g f to jump to file name under cursor (if file exists). Changing text case g u to change the current character or selection to lowercase, g U for uppercase. Hint::Toggle case with ~ ~ will toggle the case of the current character or selected region.","title":"Evil G menu"},{"location":"reference/vim-style/g-menu/#evil-g-menu","text":"g` in normal mode opens a menu of convenient utilities. Practicalli uses this menu to comment existing lines, jumping to top or bottom of the buffer and changing text case.","title":"Evil G menu"},{"location":"reference/vim-style/g-menu/#comment-lines-and-regions","text":"g c c will comment the current line using the buffer major mode comment character(s). A prompt will ask if no comment character is set for the major mode. g c with a selected region will comment all lines with the major mode comment character(s)","title":"Comment lines and regions"},{"location":"reference/vim-style/g-menu/#jumping-around","text":"g g jumps to the top of the buffer, g G to the bottom of the buffer g d to jump to the source code of a function definition, g D to open that in a different window. g f to jump to file name under cursor (if file exists).","title":"Jumping around"},{"location":"reference/vim-style/g-menu/#changing-text-case","text":"g u to change the current character or selection to lowercase, g U for uppercase.","title":"Changing text case"},{"location":"reference/vim-style/g-menu/#hinttoggle-case-with","text":"~ will toggle the case of the current character or selected region.","title":"Hint::Toggle case with ~"},{"location":"reference/vim-style/key-binding-reference/","text":"Evil Keybinding Reference An alphabetically ordered reference of Vim-style key bindings. Normal mode keybindings Keybindings available in Evil normal mode and the resultant state they leave you in. Keybinding Description State @ execute keyboard macro (defined by q ) Normal ' jump to mark (defined by m ) Normal a append text after cursor Insert a append text after cursor Insert A append text to end of sentence Insert b move cursor back to start of previous word Normal B move cursor back to start of last word Normal c change (use with modifier) Insert C change rest of sentence Insert d delete (use with modifier) Normal D delete rest of sentence Normal e end of word Normal E end of word (seems same as above) Normal f find character forward (type character) Normal F find character backward (type character) Normal fd Escape (press almost together) Normal g go menu Normal G Jump to end of buffer Normal h move cursor left Normal H move cursor to top of buffer Normal i insert text Insert I insert text at start of sentence Insert j Move cursor down a line Normal J Join next line to end of current Normal k Move cursor up a line Normal K spacemacs/evil-smart-doc-lookup Normal l Move cursor right Normal L Move cursor to bottom of buffer Normal m Create marker (next character is marker name) Normal M Jump to middle of buffer Normal n Next search occurrence Normal N Previous search occurrence Normal o New line below Insert O New line above Insert p Paste (after / below cursor) Insert P Paste (before / above cursor) Insert q Record keyboard macro attached to given character Normal Q undefined Normal r Replace character under cursor Normal R Replace character state Replace s Substitute character Insert S Substitute current line Insert t Find character forward - cursor before character Normal T Find character backward - cursor after character Normal u Undo last change (C-R to redo) Normal U Undefined Normal v Visual select Visual V Visual select sentence Visual w Jump cursor to start of next word Normal W Jump cursor to start of next word Normal x Delete character under cursor Normal X Delete character backwards Normal y y Yank (copy) line Normal Y Yank (copy) line Normal z Menu - code folding / keyboard macros Normal","title":"Evil Keybinding Reference"},{"location":"reference/vim-style/key-binding-reference/#evil-keybinding-reference","text":"An alphabetically ordered reference of Vim-style key bindings.","title":"Evil Keybinding Reference"},{"location":"reference/vim-style/key-binding-reference/#normal-mode-keybindings","text":"Keybindings available in Evil normal mode and the resultant state they leave you in. Keybinding Description State @ execute keyboard macro (defined by q ) Normal ' jump to mark (defined by m ) Normal a append text after cursor Insert a append text after cursor Insert A append text to end of sentence Insert b move cursor back to start of previous word Normal B move cursor back to start of last word Normal c change (use with modifier) Insert C change rest of sentence Insert d delete (use with modifier) Normal D delete rest of sentence Normal e end of word Normal E end of word (seems same as above) Normal f find character forward (type character) Normal F find character backward (type character) Normal fd Escape (press almost together) Normal g go menu Normal G Jump to end of buffer Normal h move cursor left Normal H move cursor to top of buffer Normal i insert text Insert I insert text at start of sentence Insert j Move cursor down a line Normal J Join next line to end of current Normal k Move cursor up a line Normal K spacemacs/evil-smart-doc-lookup Normal l Move cursor right Normal L Move cursor to bottom of buffer Normal m Create marker (next character is marker name) Normal M Jump to middle of buffer Normal n Next search occurrence Normal N Previous search occurrence Normal o New line below Insert O New line above Insert p Paste (after / below cursor) Insert P Paste (before / above cursor) Insert q Record keyboard macro attached to given character Normal Q undefined Normal r Replace character under cursor Normal R Replace character state Replace s Substitute character Insert S Substitute current line Insert t Find character forward - cursor before character Normal T Find character backward - cursor after character Normal u Undo last change (C-R to redo) Normal U Undefined Normal v Visual select Visual V Visual select sentence Visual w Jump cursor to start of next word Normal W Jump cursor to start of next word Normal x Delete character under cursor Normal X Delete character backwards Normal y y Yank (copy) line Normal Y Yank (copy) line Normal z Menu - code folding / keyboard macros Normal","title":"Normal mode keybindings"},{"location":"reference/vim-style/motions/","text":"Motions Todo Moving the cursor around by context rather than individual characters","title":"Motions"},{"location":"reference/vim-style/motions/#motions","text":"Todo Moving the cursor around by context rather than individual characters","title":"Motions"},{"location":"reference/vim-style/moving-around/","text":"Moving around the cursor Scrolling is quite inefficient in most editors and moving (jumping) the curor around is far more effective. Using the h j k l as a common part of navigation provides consistency and keeps fingers on the most convienient part of the keyboard. Moving by charater h j k l keys move the cursor once character or can be used with numbers to move further. h move left (often used to move up a path or tree, e.g. a directory path) j move down k move up l move right (often used to move down a path or tree, e.g. a directory path) Moving with numbers : followed by a number then one of h j k l keys will move the cursor that number in the director of the key. 3j will move 3 lines down the buffer (or to the end of the fuffer if there are fewer lines remaining) Using Relative line numbers showws how far each line is from the current line. The practicalli/neovim-config sets :relativenames true in fnl/config/init.fnl . 42l moves 42 charaters to the right moving by motions avoids the need to count characters Moving around the buffer g g to jump to the top of the current buffer G to jump to the bottom of the buffer z z moves the current line and cursor to the middle of the window z t moves the current line and cursor to the top of the window z t moves the current line and cursor to the bottom of the window (or as far as the buffer will move in the window)","title":"Moving around the cursor"},{"location":"reference/vim-style/moving-around/#moving-around-the-cursor","text":"Scrolling is quite inefficient in most editors and moving (jumping) the curor around is far more effective. Using the h j k l as a common part of navigation provides consistency and keeps fingers on the most convienient part of the keyboard.","title":"Moving around the cursor"},{"location":"reference/vim-style/moving-around/#moving-by-charater","text":"h j k l keys move the cursor once character or can be used with numbers to move further. h move left (often used to move up a path or tree, e.g. a directory path) j move down k move up l move right (often used to move down a path or tree, e.g. a directory path)","title":"Moving by charater"},{"location":"reference/vim-style/moving-around/#moving-with-numbers","text":": followed by a number then one of h j k l keys will move the cursor that number in the director of the key. 3j will move 3 lines down the buffer (or to the end of the fuffer if there are fewer lines remaining) Using Relative line numbers showws how far each line is from the current line. The practicalli/neovim-config sets :relativenames true in fnl/config/init.fnl . 42l moves 42 charaters to the right moving by motions avoids the need to count characters","title":"Moving with numbers"},{"location":"reference/vim-style/moving-around/#moving-around-the-buffer","text":"g g to jump to the top of the current buffer G to jump to the bottom of the buffer z z moves the current line and cursor to the middle of the window z t moves the current line and cursor to the top of the window z t moves the current line and cursor to the bottom of the window (or as far as the buffer will move in the window)","title":"Moving around the buffer"},{"location":"reference/vim-style/narrowing/","text":"Narrowing Narrowing to a region enables vim commands to be applied to a specific part of the current buffer, rather than the whole buffer. Common examples include - replacing local variables within a specific function (avoiding affecting other function definitions) NrrwRgn plugin [NrrwRgn plugin] is inspired by the Narrowing feature of Emacs and means to focus on a selected region while making the rest inaccessible. SPC n r opens a select region in a new split window. The original buffer is protected from changes. :w to write changes in the narrowed window to the original buffer Commands :NR - Open the selected region in a new narrowed window :NW - Open the current visual window in a new narrowed window :WR - (In the narrowed window) write the changes back to the original buffer. :NRV - Open the narrowed window for the region that was last visually selected. :NUD - (In a unified diff) open the selected diff in 2 Narrowed windows :NRP - Mark a region for a Multi narrowed window :NRM - Create a new Multi narrowed window (after :NRP) - experimental! :NRS - Enable Syncing the buffer content back (default on) :NRN - Disable Syncing the buffer content back :NRL - Reselect the last selected region and open it again in a narrowed window Appending ! to most commands opens the narrowed part in the current window instead of a new window. :WR! closes the narrowed window in addition to writing to the original buffer. Documentation :help NarrowRegion to view the documetation on the NrrwRgn plug use Attention :NRM is described as experimental by the project readme.","title":"Narrowing"},{"location":"reference/vim-style/narrowing/#narrowing","text":"Narrowing to a region enables vim commands to be applied to a specific part of the current buffer, rather than the whole buffer. Common examples include - replacing local variables within a specific function (avoiding affecting other function definitions)","title":"Narrowing"},{"location":"reference/vim-style/narrowing/#nrrwrgn-plugin","text":"[NrrwRgn plugin] is inspired by the Narrowing feature of Emacs and means to focus on a selected region while making the rest inaccessible. SPC n r opens a select region in a new split window. The original buffer is protected from changes. :w to write changes in the narrowed window to the original buffer","title":"NrrwRgn plugin"},{"location":"reference/vim-style/narrowing/#commands","text":":NR - Open the selected region in a new narrowed window :NW - Open the current visual window in a new narrowed window :WR - (In the narrowed window) write the changes back to the original buffer. :NRV - Open the narrowed window for the region that was last visually selected. :NUD - (In a unified diff) open the selected diff in 2 Narrowed windows :NRP - Mark a region for a Multi narrowed window :NRM - Create a new Multi narrowed window (after :NRP) - experimental! :NRS - Enable Syncing the buffer content back (default on) :NRN - Disable Syncing the buffer content back :NRL - Reselect the last selected region and open it again in a narrowed window Appending ! to most commands opens the narrowed part in the current window instead of a new window. :WR! closes the narrowed window in addition to writing to the original buffer.","title":"Commands"},{"location":"reference/vim-style/narrowing/#documentation","text":":help NarrowRegion to view the documetation on the NrrwRgn plug use","title":"Documentation"},{"location":"reference/vim-style/narrowing/#attention","text":":NRM is described as experimental by the project readme.","title":"Attention"},{"location":"reference/vim-style/speaking-vim/","text":"Learning to speak Vim Neovim is easier to learn and gain much more benefit from if you learn to speak commands as sentences. First learn some verbs: c change d delete g go, v visual select y yank (copy) Then use those verbs with some modifiers ' mark { } beginning/end of paragraph 0 start of line ^ first non white-space character of line $ end of line a around f find (includes character) i inside a range (e.g. word, paren,) s surround t till (move just before specified character) Then learn the text objects you can apply verbs and modifiers too b block/parentheses p paragraph, s sentence t tag e.g. html/xml w word Examples of speaking Vim Practice speaking evil with these examples Keybinding Description c i s change inside current sentence (change the whole sentence) c i \" change inside double quotes c f ) change from cursor to next ) character c s ' \" change by the surrounding single quotes with double quotes c t X change till the character X (not including X ) c /foo change until the first search result of \u2018foo\u2019 d d delete current line D delete current line from cursor onward d i w delete inside the current word (delete word) v t SPC visual select till the next Space character v s ] visually select and surround with [] without spaces v s [ as above with [ ] with spaces between parens and content g v go to last visual selection (select last visual selection) v a p visually select around current paragraph v i w S \" visually select, insert around current word, and surround with quotes y y yank (copy) current line y w yank (copy) current word y @ a yank (copy) to mark a ( m a creates a mark called a )","title":"Learning to speak Vim"},{"location":"reference/vim-style/speaking-vim/#learning-to-speak-vim","text":"Neovim is easier to learn and gain much more benefit from if you learn to speak commands as sentences. First learn some verbs: c change d delete g go, v visual select y yank (copy) Then use those verbs with some modifiers ' mark { } beginning/end of paragraph 0 start of line ^ first non white-space character of line $ end of line a around f find (includes character) i inside a range (e.g. word, paren,) s surround t till (move just before specified character) Then learn the text objects you can apply verbs and modifiers too b block/parentheses p paragraph, s sentence t tag e.g. html/xml w word","title":"Learning to speak Vim"},{"location":"reference/vim-style/speaking-vim/#examples-of-speaking-vim","text":"Practice speaking evil with these examples Keybinding Description c i s change inside current sentence (change the whole sentence) c i \" change inside double quotes c f ) change from cursor to next ) character c s ' \" change by the surrounding single quotes with double quotes c t X change till the character X (not including X ) c /foo change until the first search result of \u2018foo\u2019 d d delete current line D delete current line from cursor onward d i w delete inside the current word (delete word) v t SPC visual select till the next Space character v s ] visually select and surround with [] without spaces v s [ as above with [ ] with spaces between parens and content g v go to last visual selection (select last visual selection) v a p visually select around current paragraph v i w S \" visually select, insert around current word, and surround with quotes y y yank (copy) current line y w yank (copy) current word y @ a yank (copy) to mark a ( m a creates a mark called a )","title":"Examples of speaking Vim"},{"location":"reference/vim-style/vim-quick-reference/","text":"Neovim Quick Reference A reference of the most common keybindings available in Vim Normal mode. Spacemacs DOCUMENTATION key bindings section contains full details . repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session. Moving around In Normal mode you can keep your fingers resting on the main row of your keyboard to move around. Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character In menus such as helm you can move around using Ctrl and these keybindings. So C-j will move the cursor down one item in a menu. Navigating the current line Key Action f to next character (you specify) t to just before the next character ; repeat f or t search w start of next word W start of next word, white space delimited e end of current word b start of previous word W end of next word, white space delimited * to next matching symbol name $ end of current line 0 start of current line ^ start of non-whitespace % jump to matching parens or next closed paren Navigating the current buffer Key action gg start of buffer G end of buffer H move cursor to head of buffer M move cursor to middle of buffer L move cursor to bottom line of buffer C-u jump up half a page C-d jump down half a page } move cursor forward by paragraph or block { move cursor backward by paragraph or block ma mark a line in a file with marker \"a\" `a after moving around, go back to the exact position of marker \"a\" 'a after moving around, go back to line of marker \"a\" :marks view all the marks '' go to the last place you were [{ jump back to the \"{\" at the beginning of the current code block C-o jump back to previous cursor location ( evil-jump-backwards ) C-i Go to newer position in jump list (opposite of C-o ) : 4 go to line 4 Text Editing The following commands put you into the Evil Insert state Key Action i insert state at cursor I insert state at start of line a append - insert state after cursor A append - insert state at end of line o new line after cursor O new line before cursor Return to Normal state Regularly switch back to normal state should become common practice. As soon as you finish typing some new text, it should become second nature to go back to normal state. ESC or press fd keys in extremely quick succession. HINT:: fd shortcut for Esc Using f d together is low risk as if you dont get it right it will either add the characters or try find the next d character (as f moves to the next character). Keep trying this key combination as once in normal state you can use u to undo any f d characters inserted. Copy, cut, paste, undo, redo v in Vim normal mode changes to Visual select mode. Use the navigation keys or any other movement keys to select text to copy or cut. Key Action y copy (yank) selection and add to kill ring x delete character at point and add to kill ring X delete character before point and add to kill ring p paste (put) u undo Ctrl-r redo Hint:: Undo tips Undo will revert the last action in normal mode or all the changes you made in insert state Replace and changing text Key Action r replace the character under cursor R replace multiple characters until ESC cw change word from cursor to end 4 c w change 4 words v (select) c change region v (select) d delete region v i w c change current word v i d delete current word d w delete from cursor to end of word C change from cursor to end of line D , d $ delete from cursor to end of line Delete commands Key Action de delete to end of word, not including space dw delete to end of word, including space d$ delete to end of line dd delete the current line 4 d w delete 4 words 4 d $ delete 4 lines to end dt delete to a character (not including character) dab delete a whole block / expression dib delete contents of a block / expression cab change all the block / expression cib change inner block contents / expression yab yank all block / expression yib yank inner block contents / expression Repeat commands Key Action . repeat last command again <number> <cmd> repeat command a number of times The . keybinding will repeat the last command in normal mode or the last text edit in insert mode. Type a number before a command and that command will run that number of times. Hint::Inserting a comment border Use the number repeat to create a border of 42 ; characters. Type 42 to repeat the command 42 times Press i for insert mode Press ; as the character to repeat insert Press ESC or fd to leave insert mode and insert all 42 ; characters Transposing / swap Key Description x p transpose the current character with the next character Comments - works for all major modes g c c to comment out the current line g c to comment out the currently selected region To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers. g c 3 j will comment the current line and the following two lines below. Comment in reverse using g c 3 k . In Visual state, v , select the lines you wish to comment and use g c to comment all the marked lines. Partially marked lines are not commented. Managing Files Files in practicalli/neovim-config can be managed with Telescope plugin, although the neovim commands can also be used SPC p t toggles a visual file explorer on as a leftmost window, providing a further way to navigate files and directories. Key Description SPC f f find existing file (from current local root of neovim) SPC f / copy file - save current buffer with a new file name SPC f b browse files - Esc to run commands SPC f b Esc r change file name of current buffer Telescope file browser opens in Insert mode to allow typing filenames, to narrow the results in the Telescope popup. Telescope browser commands SPC f b opens telescope browser which allows commands to be run over the current file or directory. Esc swiches the Telescope popup to normal mode, allowing commands to be used c create file / directory (any missing parts of a path are created) r rename a file / directory R replace TAB selects files and directories, allowing for commands (i.e. rename) to be done in batch mode (acting on all selected files / directories) Working with Buffers To work with files in Neovim they are loaded into a Buffer . Buffers are displayed in a window and you can change the window to show any of the current buffers. SPC b displays the buffer menu and the most common commands include: Key Command Description SPC b b :Telescope buffers List current buffers SPC b d :bdelete Kill current buffer SPC b n :bnext Switch to next buffer SPC b p :bprevious Switch to previous buffer SPC b a :ball Switch to previous buffer Quit or Restart Emacs I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs. Key Action SPC q a Quit Neovim (blocked if unsaved change in buffers) SPC q q Quit buffer (blocked if unsaved change in buffers) SPS q Q Force quit of Neovim External commands run external commands using :! followed by a command. For example: :!ls - run the ls command","title":"Neovim Quick Reference"},{"location":"reference/vim-style/vim-quick-reference/#neovim-quick-reference","text":"A reference of the most common keybindings available in Vim Normal mode. Spacemacs DOCUMENTATION key bindings section contains full details . repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session.","title":"Neovim Quick Reference"},{"location":"reference/vim-style/vim-quick-reference/#moving-around","text":"In Normal mode you can keep your fingers resting on the main row of your keyboard to move around. Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character In menus such as helm you can move around using Ctrl and these keybindings. So C-j will move the cursor down one item in a menu.","title":"Moving around"},{"location":"reference/vim-style/vim-quick-reference/#navigating-the-current-line","text":"Key Action f to next character (you specify) t to just before the next character ; repeat f or t search w start of next word W start of next word, white space delimited e end of current word b start of previous word W end of next word, white space delimited * to next matching symbol name $ end of current line 0 start of current line ^ start of non-whitespace % jump to matching parens or next closed paren","title":"Navigating the current line"},{"location":"reference/vim-style/vim-quick-reference/#navigating-the-current-buffer","text":"Key action gg start of buffer G end of buffer H move cursor to head of buffer M move cursor to middle of buffer L move cursor to bottom line of buffer C-u jump up half a page C-d jump down half a page } move cursor forward by paragraph or block { move cursor backward by paragraph or block ma mark a line in a file with marker \"a\" `a after moving around, go back to the exact position of marker \"a\" 'a after moving around, go back to line of marker \"a\" :marks view all the marks '' go to the last place you were [{ jump back to the \"{\" at the beginning of the current code block C-o jump back to previous cursor location ( evil-jump-backwards ) C-i Go to newer position in jump list (opposite of C-o ) : 4 go to line 4","title":"Navigating the current buffer"},{"location":"reference/vim-style/vim-quick-reference/#text-editing","text":"The following commands put you into the Evil Insert state Key Action i insert state at cursor I insert state at start of line a append - insert state after cursor A append - insert state at end of line o new line after cursor O new line before cursor","title":"Text Editing"},{"location":"reference/vim-style/vim-quick-reference/#return-to-normal-state","text":"Regularly switch back to normal state should become common practice. As soon as you finish typing some new text, it should become second nature to go back to normal state. ESC or press fd keys in extremely quick succession.","title":"Return to Normal state"},{"location":"reference/vim-style/vim-quick-reference/#hintfd-shortcut-for-esc","text":"Using f d together is low risk as if you dont get it right it will either add the characters or try find the next d character (as f moves to the next character). Keep trying this key combination as once in normal state you can use u to undo any f d characters inserted.","title":"HINT::fd shortcut for Esc"},{"location":"reference/vim-style/vim-quick-reference/#copy-cut-paste-undo-redo","text":"v in Vim normal mode changes to Visual select mode. Use the navigation keys or any other movement keys to select text to copy or cut. Key Action y copy (yank) selection and add to kill ring x delete character at point and add to kill ring X delete character before point and add to kill ring p paste (put) u undo Ctrl-r redo","title":"Copy, cut, paste, undo, redo"},{"location":"reference/vim-style/vim-quick-reference/#hint-undo-tips","text":"Undo will revert the last action in normal mode or all the changes you made in insert state","title":"Hint:: Undo tips"},{"location":"reference/vim-style/vim-quick-reference/#replace-and-changing-text","text":"Key Action r replace the character under cursor R replace multiple characters until ESC cw change word from cursor to end 4 c w change 4 words v (select) c change region v (select) d delete region v i w c change current word v i d delete current word d w delete from cursor to end of word C change from cursor to end of line D , d $ delete from cursor to end of line","title":"Replace and changing text"},{"location":"reference/vim-style/vim-quick-reference/#delete-commands","text":"Key Action de delete to end of word, not including space dw delete to end of word, including space d$ delete to end of line dd delete the current line 4 d w delete 4 words 4 d $ delete 4 lines to end dt delete to a character (not including character) dab delete a whole block / expression dib delete contents of a block / expression cab change all the block / expression cib change inner block contents / expression yab yank all block / expression yib yank inner block contents / expression","title":"Delete commands"},{"location":"reference/vim-style/vim-quick-reference/#repeat-commands","text":"Key Action . repeat last command again <number> <cmd> repeat command a number of times The . keybinding will repeat the last command in normal mode or the last text edit in insert mode. Type a number before a command and that command will run that number of times.","title":"Repeat commands"},{"location":"reference/vim-style/vim-quick-reference/#hintinserting-a-comment-border","text":"Use the number repeat to create a border of 42 ; characters. Type 42 to repeat the command 42 times Press i for insert mode Press ; as the character to repeat insert Press ESC or fd to leave insert mode and insert all 42 ; characters","title":"Hint::Inserting a comment border"},{"location":"reference/vim-style/vim-quick-reference/#transposing-swap","text":"Key Description x p transpose the current character with the next character","title":"Transposing / swap"},{"location":"reference/vim-style/vim-quick-reference/#comments-works-for-all-major-modes","text":"g c c to comment out the current line g c to comment out the currently selected region To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers. g c 3 j will comment the current line and the following two lines below. Comment in reverse using g c 3 k . In Visual state, v , select the lines you wish to comment and use g c to comment all the marked lines. Partially marked lines are not commented.","title":"Comments - works for all major modes"},{"location":"reference/vim-style/vim-quick-reference/#managing-files","text":"Files in practicalli/neovim-config can be managed with Telescope plugin, although the neovim commands can also be used SPC p t toggles a visual file explorer on as a leftmost window, providing a further way to navigate files and directories. Key Description SPC f f find existing file (from current local root of neovim) SPC f / copy file - save current buffer with a new file name SPC f b browse files - Esc to run commands SPC f b Esc r change file name of current buffer Telescope file browser opens in Insert mode to allow typing filenames, to narrow the results in the Telescope popup.","title":"Managing Files"},{"location":"reference/vim-style/vim-quick-reference/#telescope-browser-commands","text":"SPC f b opens telescope browser which allows commands to be run over the current file or directory. Esc swiches the Telescope popup to normal mode, allowing commands to be used c create file / directory (any missing parts of a path are created) r rename a file / directory R replace TAB selects files and directories, allowing for commands (i.e. rename) to be done in batch mode (acting on all selected files / directories)","title":"Telescope browser commands"},{"location":"reference/vim-style/vim-quick-reference/#working-with-buffers","text":"To work with files in Neovim they are loaded into a Buffer . Buffers are displayed in a window and you can change the window to show any of the current buffers. SPC b displays the buffer menu and the most common commands include: Key Command Description SPC b b :Telescope buffers List current buffers SPC b d :bdelete Kill current buffer SPC b n :bnext Switch to next buffer SPC b p :bprevious Switch to previous buffer SPC b a :ball Switch to previous buffer","title":"Working with Buffers"},{"location":"reference/vim-style/vim-quick-reference/#quit-or-restart-emacs","text":"I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs. Key Action SPC q a Quit Neovim (blocked if unsaved change in buffers) SPC q q Quit buffer (blocked if unsaved change in buffers) SPS q Q Force quit of Neovim","title":"Quit or Restart Emacs"},{"location":"reference/vim-style/vim-quick-reference/#external-commands","text":"run external commands using :! followed by a command. For example: :!ls - run the ls command","title":"External commands"},{"location":"reference/vim-style/vim-tips-for-developers/","text":"Vim editing for Clojure developers Vim keybindings that drive Vim editing tools that are common for developers Comments and Commenting code g c c comment line g c c comment line v (select) g c comment region g c 9 j comment 9 lines from current, downwards Simulated structural editing with surround Keybinding Description v s ] surround with [characters] without spaces v s [ surround with [ characters ] without spaces c s ( [ change surrounding from ( to [ c i ( change in ( c a ( change \u201caround\u201d ( % jump forwards to next paren, further % toggles between open and close parens. x p transpose characters (cut current, paste after) Moving around quickly f to jump forward to a given character on the current line. F to jump backwards. zt , zz , and zb to pull the current line to the top/middle/bottom of the screen. [number] G jump to line number or :22 to jump to line 22 :7j to jump 7 lines down gf jump to file name under the cursor - try this in the summary.md file Selection, find and replace viw to visual-select in (within) the current word Source code and configuration files g D open definition in another window = (code-aware indenting) operator. Nice with the ap (a paragraph) text object. C-] Jump to definition of keyword under the cursor code folding zc and zo are useful to close and open folds, which can be a nice way of focusing on certain pieces of code. Transposing characters and sections x p simple transpose of the current and next character M-t transpose words before and after cursor position { , } motions jump to next and previous empty lines. This motion makes it simple to rearrange paragraphs { d } will kill the paragraph (or multiple paragraphs) { will jump to the start of the previous paragraph p pastes the killed paragraph before the current paragraph > and < (indent and dedent) operators, useful with the aforementioned } / { motions. / ## multi-replace with iedit and narrowing /","title":"Vim editing for Clojure developers"},{"location":"reference/vim-style/vim-tips-for-developers/#vim-editing-for-clojure-developers","text":"Vim keybindings that drive Vim editing tools that are common for developers","title":"Vim editing for Clojure developers"},{"location":"reference/vim-style/vim-tips-for-developers/#comments-and-commenting-code","text":"g c c comment line g c c comment line v (select) g c comment region g c 9 j comment 9 lines from current, downwards","title":"Comments and Commenting code"},{"location":"reference/vim-style/vim-tips-for-developers/#simulated-structural-editing-with-surround","text":"Keybinding Description v s ] surround with [characters] without spaces v s [ surround with [ characters ] without spaces c s ( [ change surrounding from ( to [ c i ( change in ( c a ( change \u201caround\u201d ( % jump forwards to next paren, further % toggles between open and close parens. x p transpose characters (cut current, paste after)","title":"Simulated structural editing with surround"},{"location":"reference/vim-style/vim-tips-for-developers/#moving-around-quickly","text":"f to jump forward to a given character on the current line. F to jump backwards. zt , zz , and zb to pull the current line to the top/middle/bottom of the screen. [number] G jump to line number or :22 to jump to line 22 :7j to jump 7 lines down gf jump to file name under the cursor - try this in the summary.md file","title":"Moving around quickly"},{"location":"reference/vim-style/vim-tips-for-developers/#selection-find-and-replace","text":"viw to visual-select in (within) the current word","title":"Selection, find and replace"},{"location":"reference/vim-style/vim-tips-for-developers/#source-code-and-configuration-files","text":"g D open definition in another window = (code-aware indenting) operator. Nice with the ap (a paragraph) text object. C-] Jump to definition of keyword under the cursor","title":"Source code and configuration files"},{"location":"reference/vim-style/vim-tips-for-developers/#code-folding","text":"zc and zo are useful to close and open folds, which can be a nice way of focusing on certain pieces of code.","title":"code folding"},{"location":"reference/vim-style/vim-tips-for-developers/#transposing-characters-and-sections","text":"x p simple transpose of the current and next character M-t transpose words before and after cursor position { , } motions jump to next and previous empty lines. This motion makes it simple to rearrange paragraphs { d } will kill the paragraph (or multiple paragraphs) { will jump to the start of the previous paragraph p pastes the killed paragraph before the current paragraph > and < (indent and dedent) operators, useful with the aforementioned } / { motions. / ## multi-replace with iedit and narrowing /","title":"Transposing characters and sections"},{"location":"reference/vim-style/visual-select/","text":"Visual Select Select characters, words, lines and regions with visual select. The background changes color to visually indicate which text is selected v enters visual select mode and can be with objects such as word w and locations such as end of line $ . o to expand from left side of selection and O to expand from the right side of a selection, using the hjkl navigation keys Visual Line selection V to select by lines, using j and k .","title":"Visual Select"},{"location":"reference/vim-style/visual-select/#visual-select","text":"Select characters, words, lines and regions with visual select. The background changes color to visually indicate which text is selected v enters visual select mode and can be with objects such as word w and locations such as end of line $ . o to expand from left side of selection and O to expand from the right side of a selection, using the hjkl navigation keys","title":"Visual Select"},{"location":"reference/vim-style/visual-select/#visual-line-selection","text":"V to select by lines, using j and k .","title":"Visual Line selection"},{"location":"reference/vim-style/z-menu/","text":"Evil Z menu z in normal mode opens a menu of convenient utilities Folding code, comments and other content Code folding is very useful for hiding different levels of detail, for example you could hide everything but the function names in a namespace, showing just the API for that namespace. Comments and documentation can be folded to help you focus on a specific part of the content. Key Description z a toggle fold of code, comment, section, etc. z A toggle all folds z c close fold z f create fold z M close all folds z o open fold z O open fold recursive (capital o) z r fewer folds z R open all folds z x update folds See narrowing for a focused approach to editing. Scrolling Jump the current line to the center, top or bottom of the buffer. Key Description z b scroll the current line to bottom of buffer z t scroll the current line to top of buffer z z scroll the current line to center of buffer Spelling z = with the cursor on a word shows a list of possible spelling and similar words. Select a word using its number in tye list to repace the word under the cursor, or q to quit the spelling list. Key Description z = spelling suggestions z g add word to spelling list z w mark word as misspelled","title":"Evil Z menu"},{"location":"reference/vim-style/z-menu/#evil-z-menu","text":"z in normal mode opens a menu of convenient utilities","title":"Evil Z menu"},{"location":"reference/vim-style/z-menu/#folding-code-comments-and-other-content","text":"Code folding is very useful for hiding different levels of detail, for example you could hide everything but the function names in a namespace, showing just the API for that namespace. Comments and documentation can be folded to help you focus on a specific part of the content. Key Description z a toggle fold of code, comment, section, etc. z A toggle all folds z c close fold z f create fold z M close all folds z o open fold z O open fold recursive (capital o) z r fewer folds z R open all folds z x update folds See narrowing for a focused approach to editing.","title":"Folding code, comments and other content"},{"location":"reference/vim-style/z-menu/#scrolling","text":"Jump the current line to the center, top or bottom of the buffer. Key Description z b scroll the current line to bottom of buffer z t scroll the current line to top of buffer z z scroll the current line to center of buffer","title":"Scrolling"},{"location":"reference/vim-style/z-menu/#spelling","text":"z = with the cursor on a word shows a list of possible spelling and similar words. Select a word using its number in tye list to repace the word under the cursor, or q to quit the spelling list. Key Description z = spelling suggestions z g add word to spelling list z w mark word as misspelled","title":"Spelling"},{"location":"repl-driven-development/","text":"REPL Driven Development with Clojure Conjure provides the REPL driven development workflow for Clojure (and many other fun languages) and includes a built-in tutorial. Vim style Editing Starting a REPL (customise startup, add user namespace for dev tools) Evaluating code Structural Editing Inspecting data - portal Start a REPL process in a terminal that includes nREPL server. Conjure will look for the ``.nrepl port in the root of the current project when a Clojure file is opened and connect to the REPL process via that nREPL server. Clojure CLI REPL process Start a rich terminal UI for the Clojure REPL, using Rebel Readline clojure -M:repl/rebel This guide uses aliases from practicalli/clojure-deps-edn Or start a REPL that also includes the dev and test paths and libraries to hotload dependencies and refresh namespaces, for a reloaded REPL experience. clojure -M:env/dev:env/test:lib/reloaded:repl/rebel Hint::Create a bin/repl script Use an executable shell script to save typing the full command line each time, assuming the shell used does not have a useful way to narrow the history (e.g. zsh, fish) Create a bin/repl file and add the full clojure command to run the REPL process with the required aliases #!/usr/bin/env bash clojure -M:env/dev:env/test:lib/reloaded:repl/rebel","title":"REPL Driven Development with Clojure"},{"location":"repl-driven-development/#repl-driven-development-with-clojure","text":"Conjure provides the REPL driven development workflow for Clojure (and many other fun languages) and includes a built-in tutorial. Vim style Editing Starting a REPL (customise startup, add user namespace for dev tools) Evaluating code Structural Editing Inspecting data - portal Start a REPL process in a terminal that includes nREPL server. Conjure will look for the ``.nrepl port in the root of the current project when a Clojure file is opened and connect to the REPL process via that nREPL server.","title":"REPL Driven Development with Clojure"},{"location":"repl-driven-development/#clojure-cli-repl-process","text":"Start a rich terminal UI for the Clojure REPL, using Rebel Readline clojure -M:repl/rebel This guide uses aliases from practicalli/clojure-deps-edn Or start a REPL that also includes the dev and test paths and libraries to hotload dependencies and refresh namespaces, for a reloaded REPL experience. clojure -M:env/dev:env/test:lib/reloaded:repl/rebel","title":"Clojure CLI REPL process"},{"location":"repl-driven-development/#hintcreate-a-binrepl-script","text":"Use an executable shell script to save typing the full command line each time, assuming the shell used does not have a useful way to narrow the history (e.g. zsh, fish) Create a bin/repl file and add the full clojure command to run the REPL process with the required aliases #!/usr/bin/env bash clojure -M:env/dev:env/test:lib/reloaded:repl/rebel","title":"Hint::Create a bin/repl script"},{"location":"repl-driven-development/conjure/","text":"Conjure cheatsheet Evaluation ,eb - evaluate current buffer ,ee - evaluate expression (from start of current form) ,ef - ,ei - interrupt evaluation (stop long running evaluations) ,ew - evaluate word (symbol) - inspect value of form - i.e. for def names ,e! - replace form with its result ,emf - evaluate marked form - mark form with mf (or any character with m) - Use a capital letter to mark a form in a different namespace / buffer and evaluate if from current buffer ;; The result of every evaluation is stored in a Neovim register as well as the log. \"cp - paste contents of the register into buffer HUD The HUD appears when first opening a Clojure file in Neovim. If a REPL is running in the current project, then the HUD shows the REPL is connected. evaluating an expression shows the result in the HUD as well as inline with the code ,lr - clear (refresh HUD and keep it visible) REPL buffer (log) ,ls - open horizontal ,ls - open vertical ,lt - open in tab ,lr - soft reset - lead window open ,lR - hard reset - close window, delete buffer ,lq - close log windows (and tabs ??) ?? How to switch between log and source code buffer ?? Rich comments for expressions in a rich comment, move cursor to top level form within the comment, rather than the comment itself ,ee - eval top level form","title":"Conjure cheatsheet"},{"location":"repl-driven-development/conjure/#conjure-cheatsheet","text":"","title":"Conjure cheatsheet"},{"location":"repl-driven-development/conjure/#evaluation","text":",eb - evaluate current buffer ,ee - evaluate expression (from start of current form) ,ef - ,ei - interrupt evaluation (stop long running evaluations) ,ew - evaluate word (symbol) - inspect value of form - i.e. for def names ,e! - replace form with its result ,emf - evaluate marked form - mark form with mf (or any character with m) - Use a capital letter to mark a form in a different namespace / buffer and evaluate if from current buffer ;; The result of every evaluation is stored in a Neovim register as well as the log. \"cp - paste contents of the register into buffer","title":"Evaluation"},{"location":"repl-driven-development/conjure/#hud","text":"The HUD appears when first opening a Clojure file in Neovim. If a REPL is running in the current project, then the HUD shows the REPL is connected. evaluating an expression shows the result in the HUD as well as inline with the code ,lr - clear (refresh HUD and keep it visible)","title":"HUD"},{"location":"repl-driven-development/conjure/#repl-buffer-log","text":",ls - open horizontal ,ls - open vertical ,lt - open in tab ,lr - soft reset - lead window open ,lR - hard reset - close window, delete buffer ,lq - close log windows (and tabs ??) ?? How to switch between log and source code buffer ??","title":"REPL buffer (log)"},{"location":"repl-driven-development/conjure/#rich-comments","text":"for expressions in a rich comment, move cursor to top level form within the comment, rather than the comment itself ,ee - eval top level form","title":"Rich comments"},{"location":"repl-driven-development/testing/","text":"Unit tests and test runners Run unit tests from within Neovim, showing a summary of test results or a full test report (especially if there are failures) Or run Kaocka or Cognitech-Labs test runners in watch mode in a separate terminal session Include test path Ensure the test directory is included in the classpath when starting a REPL. Use a project or user-level alias that includes an :extra-paths key that includes [\"test\"] path clojure -M :env/test:lib/reloaded:repl/rebel Conjure Test runners , t n to run the tests for the current namespace External test runner In a buffer or separate terminal session, start a test runner in watch mode. Tests run automatically when the code changes are saved clojure -X:test/watch Start the watcher with focused or skiped tests by name or meta data (test selectors) https://cljdoc.org/d/lambdaisland/kaocha/1.66.1034/doc/6-focusing-and-skipping For example, specify test selectors to run a sub-set of tests based on selector meta data added to deftest code clojure -X:test/watch :skip-meta :persistence TODO: check syntax of Kaocha test selectors Using Kaocha, specific test namespaces (or specific tests) can be run (or excluded) clojure -X:test/watch :namespace '[practicalli.server\"] TODO: check syntax of Kaocha namespace and specific tests Reference neotest - Neovim test plugin with some language support (not Clojure - but maybe could be added)","title":"Unit tests and test runners"},{"location":"repl-driven-development/testing/#unit-tests-and-test-runners","text":"Run unit tests from within Neovim, showing a summary of test results or a full test report (especially if there are failures) Or run Kaocka or Cognitech-Labs test runners in watch mode in a separate terminal session","title":"Unit tests and test runners"},{"location":"repl-driven-development/testing/#include-test-path","text":"Ensure the test directory is included in the classpath when starting a REPL. Use a project or user-level alias that includes an :extra-paths key that includes [\"test\"] path clojure -M :env/test:lib/reloaded:repl/rebel","title":"Include test path"},{"location":"repl-driven-development/testing/#conjure-test-runners","text":", t n to run the tests for the current namespace","title":"Conjure Test runners"},{"location":"repl-driven-development/testing/#external-test-runner","text":"In a buffer or separate terminal session, start a test runner in watch mode. Tests run automatically when the code changes are saved clojure -X:test/watch Start the watcher with focused or skiped tests by name or meta data (test selectors) https://cljdoc.org/d/lambdaisland/kaocha/1.66.1034/doc/6-focusing-and-skipping For example, specify test selectors to run a sub-set of tests based on selector meta data added to deftest code clojure -X:test/watch :skip-meta :persistence TODO: check syntax of Kaocha test selectors Using Kaocha, specific test namespaces (or specific tests) can be run (or excluded) clojure -X:test/watch :namespace '[practicalli.server\"] TODO: check syntax of Kaocha namespace and specific tests","title":"External test runner"},{"location":"repl-driven-development/testing/#reference","text":"neotest - Neovim test plugin with some language support (not Clojure - but maybe could be added)","title":"Reference"},{"location":"termux/","text":"NeoVim on Termux A smart phone or tablet and an external keyboard can make an excellent ultra-portable development environment, especially when travelling with limited space or restricted weight constraints. Termux can be installed using the F-Droid marketplace , which is as easy as installing any other Android app. Do not install Termux App from the Google Play store The Termux App in Google Play store is out of date and will simply not work properly and probably not at all Running Termux Run Termux from the app launcher added as an android app by the F-Droid install. A help menu will show the basic command needed to work with packages. Software keys for Termux specific controls are shown. Keys can be toggled with the Volume Up + q key combination. Termux may not display in fullscreen when Android productivity mode, usually activated on tablets when physical keyboard or mouse is attached. Disabling productivity mode in the Android settings is recommended.","title":"NeoVim on Termux"},{"location":"termux/#neovim-on-termux","text":"A smart phone or tablet and an external keyboard can make an excellent ultra-portable development environment, especially when travelling with limited space or restricted weight constraints. Termux can be installed using the F-Droid marketplace , which is as easy as installing any other Android app. Do not install Termux App from the Google Play store The Termux App in Google Play store is out of date and will simply not work properly and probably not at all","title":"NeoVim on Termux"},{"location":"termux/#running-termux","text":"Run Termux from the app launcher added as an android app by the F-Droid install. A help menu will show the basic command needed to work with packages. Software keys for Termux specific controls are shown. Keys can be toggled with the Volume Up + q key combination. Termux may not display in fullscreen when Android productivity mode, usually activated on tablets when physical keyboard or mouse is attached. Disabling productivity mode in the Android settings is recommended.","title":"Running Termux"},{"location":"termux/clojure-development/","text":"Clojure development environment A comprehensive development environment for Clojure, supporting a REPL workflow and static analysis of code via Clojure Language Server Protocol. Java host platform Install OpenJDK to host the Clojure REPL process and run packaged Clojure applications. Java 17 Long Term Support version is recommended as it is very stable, receives security updates and has the latest highly tested performance improvements. pkg install openjdk-17 Install Clojure Clone practicalli/clojure-deps-edn to add a wide range of community tools to the Clojure CLI git clone git@github.com:practicalli/clojure-deps-edn.git ~/.config/clojure Use the Linux install with a prefix path pointing to Termux equivalent of /usr/local . Find the path using echo $PATH and remove bin from the end. Without the prefix Clojure will not install correctly curl -O https://download.clojure.org/install/linux-install-1.11.1.1149.sh chmod +x linux-install-1.11.1.1149.sh ./linux-install-1.11.1.1149.sh --prefix /data/data/com.termux/files/usr/ clojure binary is installed in the existing bin, lib and share directories in /data/..../usr/ , placing that binary on the system execution path. Test by running a REPL session, for example with Rebel Readline clojure -M:repl/rebel optionally install rlwrap package if using the basic repl terminal UI Install Clojure LSP Visit clojure-lsp GitHub releases page and download the clojure-lsp file visit the relases page in firefox and copy the link to the file. use wget and paste the link to the file to download make executable chmod 755 clojure-lsp test locally ./clojure-lsp --version - should print clojure-lsp version and clj-kondo version copy or move file to path mv clojure-lsp $PATH If the practicalli/clojure-lsp-config repository was cloned, move or link the clojure-lsp directory to ~/.config/clojure-lsp","title":"Clojure development environment"},{"location":"termux/clojure-development/#clojure-development-environment","text":"A comprehensive development environment for Clojure, supporting a REPL workflow and static analysis of code via Clojure Language Server Protocol.","title":"Clojure development environment"},{"location":"termux/clojure-development/#java-host-platform","text":"Install OpenJDK to host the Clojure REPL process and run packaged Clojure applications. Java 17 Long Term Support version is recommended as it is very stable, receives security updates and has the latest highly tested performance improvements. pkg install openjdk-17","title":"Java host platform"},{"location":"termux/clojure-development/#install-clojure","text":"Clone practicalli/clojure-deps-edn to add a wide range of community tools to the Clojure CLI git clone git@github.com:practicalli/clojure-deps-edn.git ~/.config/clojure Use the Linux install with a prefix path pointing to Termux equivalent of /usr/local . Find the path using echo $PATH and remove bin from the end. Without the prefix Clojure will not install correctly curl -O https://download.clojure.org/install/linux-install-1.11.1.1149.sh chmod +x linux-install-1.11.1.1149.sh ./linux-install-1.11.1.1149.sh --prefix /data/data/com.termux/files/usr/ clojure binary is installed in the existing bin, lib and share directories in /data/..../usr/ , placing that binary on the system execution path. Test by running a REPL session, for example with Rebel Readline clojure -M:repl/rebel optionally install rlwrap package if using the basic repl terminal UI","title":"Install Clojure"},{"location":"termux/clojure-development/#install-clojure-lsp","text":"Visit clojure-lsp GitHub releases page and download the clojure-lsp file visit the relases page in firefox and copy the link to the file. use wget and paste the link to the file to download make executable chmod 755 clojure-lsp test locally ./clojure-lsp --version - should print clojure-lsp version and clj-kondo version copy or move file to path mv clojure-lsp $PATH If the practicalli/clojure-lsp-config repository was cloned, move or link the clojure-lsp directory to ~/.config/clojure-lsp","title":"Install Clojure LSP"},{"location":"termux/custom-shell/","text":"Customise shell Customising the shell is optional, although gives an enhanced experience. Zsh provides the richest command line experience, providing many advanced features over bash. Oh My Zsh is a community configuration that provides a simple way to configure Zsh features and also supports powerline10k terminal theme , providing context specific information and a more engaging visual experience. Practicalli uses Prezto community configuration , unfortunately this does not work well on Termux. Install Zsh Install the zsh package using the Termux package manager pkg install zsh Start zsh, which will show a % character as the prompt zsh Set the shell to run zsh by default chsh -s zsh Install Oh My Zsh Install Oh My Zsh via curl (or wget if preferred) in the .oh-my-zsh/ directory sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" Install Powerline10k Powerline10k is a visually appealing prompt with a setup script to visually choose the presentation of the prompt. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Next time zsh is run, powerline10k setup script will run. If Meslo is not set as the terminal font, the setup script offers to install the font. Installing the font will restart Termux. p10k configure to manually run the powerline10k setup script. Info::Using Oh My Bash If preferring Bash, then ohmybash provides a nice command line experience, showing completions clearer, nice themes that provide information.","title":"Customise shell"},{"location":"termux/custom-shell/#customise-shell","text":"Customising the shell is optional, although gives an enhanced experience. Zsh provides the richest command line experience, providing many advanced features over bash. Oh My Zsh is a community configuration that provides a simple way to configure Zsh features and also supports powerline10k terminal theme , providing context specific information and a more engaging visual experience. Practicalli uses Prezto community configuration , unfortunately this does not work well on Termux.","title":"Customise shell"},{"location":"termux/custom-shell/#install-zsh","text":"Install the zsh package using the Termux package manager pkg install zsh Start zsh, which will show a % character as the prompt zsh Set the shell to run zsh by default chsh -s zsh","title":"Install Zsh"},{"location":"termux/custom-shell/#install-oh-my-zsh","text":"Install Oh My Zsh via curl (or wget if preferred) in the .oh-my-zsh/ directory sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \"","title":"Install Oh My Zsh"},{"location":"termux/custom-shell/#install-powerline10k","text":"Powerline10k is a visually appealing prompt with a setup script to visually choose the presentation of the prompt. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Next time zsh is run, powerline10k setup script will run. If Meslo is not set as the terminal font, the setup script offers to install the font. Installing the font will restart Termux. p10k configure to manually run the powerline10k setup script.","title":"Install Powerline10k"},{"location":"termux/custom-shell/#infousing-oh-my-bash","text":"If preferring Bash, then ohmybash provides a nice command line experience, showing completions clearer, nice themes that provide information.","title":"Info::Using Oh My Bash"},{"location":"termux/fdroid-install/","text":"Install Termux via the F-Droid App Visit the FDroid app website and download F-Droid, which saves an F-Droid.apk file. Android may display a security prompt stating the browser does not have permissions to install software. The popup should include a configure link that opens the Android settings to allow the browser to install software. F-Droid should now be installed and its icon added to the Android system alongside all other Android apps. Open the F-Droid App and allow it to update its repositories, to ensure the latest list of apps are shown. Search for the Termux application, clicking on the Termux name if more details are required. Select the Install button. When installing apps from F-Droid for the first time, a security prompt is show as F-Droid is an unknown source. Select Settings to open the Android settings and enable Allow from this source for the F-Droid app. A Termux App launcher will be added to the Android screen. Consider adding the Termux icon to the commonly used icons bar. Termux Styling Styling is a Termux plugin that provides a visually richer experience. Styling contains beautiful color schemes and powerline-reaqdy fonts to customise the appearance of the terminal Install the package via F-Droid The styling menu is accessed via a long press on the Termux app screen, showing a More > Style option on the usual cut/copy/paste popup menu. Practicalli recommends FiraCode fonts.","title":"Install Termux via the F-Droid App"},{"location":"termux/fdroid-install/#install-termux-via-the-f-droid-app","text":"Visit the FDroid app website and download F-Droid, which saves an F-Droid.apk file. Android may display a security prompt stating the browser does not have permissions to install software. The popup should include a configure link that opens the Android settings to allow the browser to install software. F-Droid should now be installed and its icon added to the Android system alongside all other Android apps. Open the F-Droid App and allow it to update its repositories, to ensure the latest list of apps are shown. Search for the Termux application, clicking on the Termux name if more details are required. Select the Install button. When installing apps from F-Droid for the first time, a security prompt is show as F-Droid is an unknown source. Select Settings to open the Android settings and enable Allow from this source for the F-Droid app. A Termux App launcher will be added to the Android screen. Consider adding the Termux icon to the commonly used icons bar.","title":"Install Termux via the F-Droid App"},{"location":"termux/fdroid-install/#termux-styling","text":"Styling is a Termux plugin that provides a visually richer experience. Styling contains beautiful color schemes and powerline-reaqdy fonts to customise the appearance of the terminal Install the package via F-Droid The styling menu is accessed via a long press on the Termux app screen, showing a More > Style option on the usual cut/copy/paste popup menu. Practicalli recommends FiraCode fonts.","title":"Termux Styling"},{"location":"termux/git/","text":"Git version control A Git client is used to version control projects and to clone projects and configuration from GitHub/GitLab. Practicalli maintains several editor configurations in shared repositories on GitHub Install a Git Client (and optionally GitHub CLI) [optionally] clone the practicalli/dotfiles repository for the Git config and global ignores Configure an SSH key to access remote repositories (or Developer token if you cannot use SSH keys) Install a git client and GitHub CLI pkg install git gh Clone the practicalli/dotfiles repository git clone https://github.com/practicalli/dotfiles projects/dotfiles Move or symbolically link the top-level directories to ~/.config , e.g. for the Git configuration: ln -s projects/dotfiles/git ~/.config/git Edit the .config/git/config and update the core.user , core.name and github or gitlab identities Create SSH Key for remote repository access Install the openssh package which contains the ssh-keygen command to generate a new public/private key combinations for use with GitHub SSH repository URLs pkg install openssh Generate a key using the email address of the GitHub or GitLab account ssh-keygen -t rsa -C name@domain.tld RET to confirm storing the keys in the default location. Usually a passphrase is recommended, however, termux does not seem to save a keyring to save the key passphrase using ssh-add . So the passphrase must be entered each time the key is used, unless a blank passphrase is used. Vist your GitHub account settings and create a new SSH key Use cat ~/.ssh/id_rsa.pub to show the public key contents. Press the screen to select and copy the public key to the clipboard. Paste the public key into the GitHub new key form. [optional] Create a developer token A developer token (or ssh key) is required to access GitHub {and far more secure over password} Should the android device become lost or compromised, the developer token can be deleted to protect the repositories from any malicious access. The developer token should be limited to the minimal access. The developer token does not give access to the GitHub or GitLab account. HTTPS URLs should be used with a developer token. git@git.com URLs are for SSH keys only. Visit GitHub / GitLab settings for your account Create a new developer token specifically for Termux Add a descriptive name for the token, based on the device Termuxc is runniung on, e.g. Termux Pixel2XL Check the public_repo and status repo scopes Generate button creates a new token. Copy the token using the copy icon. Edit the .config/git/config file and add a github section with the GitHub account name and token [github] name = practicalli token = ghp_************************************ Consider using GitHub CLI to cache the developer token rather than write the token to the Git configuration file for greater security.","title":"Git version control"},{"location":"termux/git/#git-version-control","text":"A Git client is used to version control projects and to clone projects and configuration from GitHub/GitLab. Practicalli maintains several editor configurations in shared repositories on GitHub Install a Git Client (and optionally GitHub CLI) [optionally] clone the practicalli/dotfiles repository for the Git config and global ignores Configure an SSH key to access remote repositories (or Developer token if you cannot use SSH keys)","title":"Git version control"},{"location":"termux/git/#install-a-git-client-and-github-cli","text":"pkg install git gh Clone the practicalli/dotfiles repository git clone https://github.com/practicalli/dotfiles projects/dotfiles Move or symbolically link the top-level directories to ~/.config , e.g. for the Git configuration: ln -s projects/dotfiles/git ~/.config/git Edit the .config/git/config and update the core.user , core.name and github or gitlab identities","title":"Install a git client and GitHub CLI"},{"location":"termux/git/#create-ssh-key-for-remote-repository-access","text":"Install the openssh package which contains the ssh-keygen command to generate a new public/private key combinations for use with GitHub SSH repository URLs pkg install openssh Generate a key using the email address of the GitHub or GitLab account ssh-keygen -t rsa -C name@domain.tld RET to confirm storing the keys in the default location. Usually a passphrase is recommended, however, termux does not seem to save a keyring to save the key passphrase using ssh-add . So the passphrase must be entered each time the key is used, unless a blank passphrase is used. Vist your GitHub account settings and create a new SSH key Use cat ~/.ssh/id_rsa.pub to show the public key contents. Press the screen to select and copy the public key to the clipboard. Paste the public key into the GitHub new key form.","title":"Create SSH Key for remote repository access"},{"location":"termux/git/#optional-create-a-developer-token","text":"A developer token (or ssh key) is required to access GitHub {and far more secure over password} Should the android device become lost or compromised, the developer token can be deleted to protect the repositories from any malicious access. The developer token should be limited to the minimal access. The developer token does not give access to the GitHub or GitLab account. HTTPS URLs should be used with a developer token. git@git.com URLs are for SSH keys only. Visit GitHub / GitLab settings for your account Create a new developer token specifically for Termux Add a descriptive name for the token, based on the device Termuxc is runniung on, e.g. Termux Pixel2XL Check the public_repo and status repo scopes Generate button creates a new token. Copy the token using the copy icon. Edit the .config/git/config file and add a github section with the GitHub account name and token [github] name = practicalli token = ghp_************************************ Consider using GitHub CLI to cache the developer token rather than write the token to the Git configuration file for greater security.","title":"[optional] Create a developer token"},{"location":"termux/neovim/","text":"Install neovim version 7 availabe as current package pkg install neovim Neovim treesitter Treesitter provides excellent language syntax parsing and highlighting and is a very attractive feature of the recent neovim releases. Treesitter is a major attraction, bringing in a new audience for Neovim. The nvim-treesitter package is included in the practicalli/neovim-config-redux configuration. C Compiler Install C compiler for neovim-treesitter, to compile a parser for each specific programming language. pkg install clang gcc is not packaged for Termux, although there are guides to install gcc if preferred. clang has proved to be capable of creating the parsers used in the Practicalli configuration. Searching files Telescope and other packages that involve searching for files recommend using ripgrep, a highly optomised tool for finding files on the operating system. pkg install ripgrep [optional] nodejs Optional. Only if node.js is required as a Neovim provider and JavaScript or ClojureScript development is to be done. pkg install nodejs","title":"Install neovim"},{"location":"termux/neovim/#install-neovim","text":"version 7 availabe as current package pkg install neovim","title":"Install neovim"},{"location":"termux/neovim/#neovim-treesitter","text":"Treesitter provides excellent language syntax parsing and highlighting and is a very attractive feature of the recent neovim releases. Treesitter is a major attraction, bringing in a new audience for Neovim. The nvim-treesitter package is included in the practicalli/neovim-config-redux configuration.","title":"Neovim treesitter"},{"location":"termux/neovim/#c-compiler","text":"Install C compiler for neovim-treesitter, to compile a parser for each specific programming language. pkg install clang gcc is not packaged for Termux, although there are guides to install gcc if preferred. clang has proved to be capable of creating the parsers used in the Practicalli configuration.","title":"C Compiler"},{"location":"termux/neovim/#searching-files","text":"Telescope and other packages that involve searching for files recommend using ripgrep, a highly optomised tool for finding files on the operating system. pkg install ripgrep","title":"Searching files"},{"location":"termux/neovim/#optional-nodejs","text":"Optional. Only if node.js is required as a Neovim provider and JavaScript or ClojureScript development is to be done. pkg install nodejs","title":"[optional] nodejs"},{"location":"termux/setup/","text":"Termux Setup Launch Termux via its application icon. A black terminal screen will appear with a bash shell prompt. Update packages Check for new packages and update them all package upgrade -y If you wish to first check the packages that will be updated, use pkg --list-upgradable termux-change-repo to select a specific region to minimise the number of mirrors checked during package upgrades, especially useful if on a limited data plan. At time of writing, the Termux package on F-Droid was around 6 months old so there will be a number of packages that should be updated before any further installation steps are undertaken. Configure Freedesktop.org XDG locations nano ~/.profile to edit the ~/.profile file, adding export directives to set the XDG locations: export XDG_CONFIG_HOME = $HOME /.config export XDG_DATA_HOME = $HOME /.local/share export XDG_STATE_HOME = $HOME /.local/state export XDG_CACHE_HOME = $HOME /.cache # Set XDG location of Emacs Spacemacs configuration export SPACEMACSDIR = \" $XDG_CONFIG_HOME /spacemacs\" source ~/.profile to load the environment variables into the shell, or exit Termux and restart. Hint::nano editor installed by default nano editor is used to edit the commands as the package is installed by default in termux. vim , neovim , emacs or any other Linux command line editor can be used if the package is first installed. Termux will list packages to install when trying to run a command that is from a package not yet installed. Tools to download binaries and configuration Many tools can be installed via the pkg tool, although specific Clojure tools and configuration require additional tools: wget and curl - download tools not packaged, i.e. clojure-lsp binary git - clone configuration files and projects (see Git version control section) openssh - SSH service and tools to generate SSH keys pkg install curl wget git openssh Configure a Git Identify and SSH key to before committing and pushing changes, or cloning repositories using the SSH protocol. practicalli/dotfiles contains example configuration, ignore patterns and commit template for using Git. [Optional] Configure Termux Settings nano ~/.termu/termux.properties to configure the default settings for termux. termux-reload-settings if any of the values are set (restarting Termux is not enough to load setting changes) The defaults are suitable for the majority of uses, although you may wish to consider: fullscreen set to true to us the whole screen, hiding Android menu bars, etc. hide-soft-keyboard-on-startup set to true if always using a physical keyboard default-working-directory to save files user files and directories in an alternative location, If swiping from left edge of the screen is already taken, set key bindings for creating a new termux session, naming a session and switching between sessions. Alternatively, use byobu to create and switch between its tabs for multiple terminal sessions. Set Color Scheme and Font The Termux:Styling plug provides menus for selecting terminal color scheme and font to use Press and hold on the Termux screen to show the context menu and select the Style menu. On smaller screens select More > Style If Termux:Styling plugin was not installed, a prompt will display asking if the plugin should be installed A menu appears with Choose Color and Choose Font Select Choose Color to select from the available list of colour schemes, e.g. Gruvbox Dark or Gruvbox Light ~/.termux/colors.properties file is added when selecting a colour scheme, defining Hex colors from the theme selected. Select Choose Font to select from the available fonts, e.g. FiraCode or Ubuntu ~/.termux/font.ttf font file is added when selecting a font. INFO::Termux:Styling uses NerdFonts for icons All fonts installed via Termux:Styling have been patched with NerdFonts , providing several thousand icons to use within the terminal prompt and Neovim itself (e.g. VimDevIcons).","title":"Termux Setup"},{"location":"termux/setup/#termux-setup","text":"Launch Termux via its application icon. A black terminal screen will appear with a bash shell prompt.","title":"Termux Setup"},{"location":"termux/setup/#update-packages","text":"Check for new packages and update them all package upgrade -y If you wish to first check the packages that will be updated, use pkg --list-upgradable termux-change-repo to select a specific region to minimise the number of mirrors checked during package upgrades, especially useful if on a limited data plan. At time of writing, the Termux package on F-Droid was around 6 months old so there will be a number of packages that should be updated before any further installation steps are undertaken.","title":"Update packages"},{"location":"termux/setup/#configure-freedesktoporg-xdg-locations","text":"nano ~/.profile to edit the ~/.profile file, adding export directives to set the XDG locations: export XDG_CONFIG_HOME = $HOME /.config export XDG_DATA_HOME = $HOME /.local/share export XDG_STATE_HOME = $HOME /.local/state export XDG_CACHE_HOME = $HOME /.cache # Set XDG location of Emacs Spacemacs configuration export SPACEMACSDIR = \" $XDG_CONFIG_HOME /spacemacs\" source ~/.profile to load the environment variables into the shell, or exit Termux and restart.","title":"Configure Freedesktop.org XDG locations"},{"location":"termux/setup/#hintnano-editor-installed-by-default","text":"nano editor is used to edit the commands as the package is installed by default in termux. vim , neovim , emacs or any other Linux command line editor can be used if the package is first installed. Termux will list packages to install when trying to run a command that is from a package not yet installed.","title":"Hint::nano editor installed by default"},{"location":"termux/setup/#tools-to-download-binaries-and-configuration","text":"Many tools can be installed via the pkg tool, although specific Clojure tools and configuration require additional tools: wget and curl - download tools not packaged, i.e. clojure-lsp binary git - clone configuration files and projects (see Git version control section) openssh - SSH service and tools to generate SSH keys pkg install curl wget git openssh Configure a Git Identify and SSH key to before committing and pushing changes, or cloning repositories using the SSH protocol. practicalli/dotfiles contains example configuration, ignore patterns and commit template for using Git.","title":"Tools to download binaries and configuration"},{"location":"termux/setup/#optional-configure-termux-settings","text":"nano ~/.termu/termux.properties to configure the default settings for termux. termux-reload-settings if any of the values are set (restarting Termux is not enough to load setting changes) The defaults are suitable for the majority of uses, although you may wish to consider: fullscreen set to true to us the whole screen, hiding Android menu bars, etc. hide-soft-keyboard-on-startup set to true if always using a physical keyboard default-working-directory to save files user files and directories in an alternative location, If swiping from left edge of the screen is already taken, set key bindings for creating a new termux session, naming a session and switching between sessions. Alternatively, use byobu to create and switch between its tabs for multiple terminal sessions.","title":"[Optional] Configure Termux Settings"},{"location":"termux/setup/#set-color-scheme-and-font","text":"The Termux:Styling plug provides menus for selecting terminal color scheme and font to use Press and hold on the Termux screen to show the context menu and select the Style menu. On smaller screens select More > Style If Termux:Styling plugin was not installed, a prompt will display asking if the plugin should be installed A menu appears with Choose Color and Choose Font Select Choose Color to select from the available list of colour schemes, e.g. Gruvbox Dark or Gruvbox Light ~/.termux/colors.properties file is added when selecting a colour scheme, defining Hex colors from the theme selected. Select Choose Font to select from the available fonts, e.g. FiraCode or Ubuntu ~/.termux/font.ttf font file is added when selecting a font.","title":"Set Color Scheme and Font"},{"location":"termux/setup/#infotermuxstyling-uses-nerdfonts-for-icons","text":"All fonts installed via Termux:Styling have been patched with NerdFonts , providing several thousand icons to use within the terminal prompt and Neovim itself (e.g. VimDevIcons).","title":"INFO::Termux:Styling uses NerdFonts for icons"},{"location":"termux/using-termux/","text":"Using Termux Start Termux app and a terminal prompt is shown, along with the standard Android software keyboard. An extended keyboard is provided with common key bindings for the command line interface (Tab, Esc, Ctrl, arrow keys, etc.). Keyboards Termux provides an extended keyboard with key combinations not possible with the Android software keyboard, i.e Ctrl-c , arrow keys, etc. TAB is especially useful for driving command and filename completion. Volume Up + q toggles the extended keyboard, so more screen is available when using a hardware keyboard. Connect a hardware keyboard for the best experience, e.g the Keyboard.io atreus is an excellent and highly portable mechanical keyboard. The software keyboard is automatically switched off when a hardware keyboard is connected, although the extended keyboard is still displayed by default. Adjusting Font size Pinch the screen inwards to zoom out making the text font smaller. Pinch the screen outwards to zoom in making the text font larger. Termux menus Termux has three menus: A context menu, navigation drawer and Termux section of the Android notification. The context menu is shown by a long press anywhere on the terminal screen: Select and Paste text to share text with other applications Reset the terminal if it gets stuck or Hangup to exit the current terminal session Style the terminal by selecting a font and a color scheme The navigation drawer is shown by swiping inwards from the left of the screen list and select terminal sessions, set a name for a session with a long press A button to toggle visibility of the touch keyboard. A button to create new terminal sessions (long press for creating a named session or a fail-safe one). If gesture navigation is enabled in Android, hold the edge of the screen briefly before swiping to bring up the navigation drawer The Android notification menu contains a Termux section. Press the Termux section to show the current terminal session or expand the Termux section to exiting all running terminal sessions or aquire a wake lock to avoid Termux entering sleep mode. A wake lock allows server and other background processes to run reliably and to continue to receive notifications Package management Termux provides a Linux command line experience, providing a wide range of Unix tools and development environments. Termux uses a Debian based system and packages are easily installed apt install add tools and libraries to the Linux environment from the curated packages in the software center apt update updates the list of packages fromhe software center apt list --upgradable shows list of packages with new versions apt upgrade install new versions of currently installed packages apt-cache search --names-only - search for packages that include a specific pattern in their name. apt-cache show - shows detail of the supplied package name, including a description pkg is an alias for apt , the advance package tool, although there seems little benefit to using pkg if familiar with apt (they are both 3 characters) Byobu terminal tab manager Byobu is an alternative to Termux provides a single terminal prompt. Byobu provides multiple shell prompts, allowing individual Clojure tools and editors to be run from the Termux prompt simultaneously. Practicalli uses byobu to run Neovim, a Clojure REPL and unit test watcher in separate byobu tabs with the ability to add further tabs for other command line tools. pkg install byobu F2 to create a new tab F3 to select previous tab F4 to select next tab byobu-enable command will configure the current shell to run byobu on startup. Test this is working by typing exit in Termux and start Termux app again. byobu-disable stops this behaviour and byobu will need to be run manually after starting Termux. Run the byobu-enable command again if zsh is configured after this step or if adding any other shell to Termux.","title":"Using Termux"},{"location":"termux/using-termux/#using-termux","text":"Start Termux app and a terminal prompt is shown, along with the standard Android software keyboard. An extended keyboard is provided with common key bindings for the command line interface (Tab, Esc, Ctrl, arrow keys, etc.).","title":"Using Termux"},{"location":"termux/using-termux/#keyboards","text":"Termux provides an extended keyboard with key combinations not possible with the Android software keyboard, i.e Ctrl-c , arrow keys, etc. TAB is especially useful for driving command and filename completion. Volume Up + q toggles the extended keyboard, so more screen is available when using a hardware keyboard. Connect a hardware keyboard for the best experience, e.g the Keyboard.io atreus is an excellent and highly portable mechanical keyboard. The software keyboard is automatically switched off when a hardware keyboard is connected, although the extended keyboard is still displayed by default.","title":"Keyboards"},{"location":"termux/using-termux/#adjusting-font-size","text":"Pinch the screen inwards to zoom out making the text font smaller. Pinch the screen outwards to zoom in making the text font larger.","title":"Adjusting Font size"},{"location":"termux/using-termux/#termux-menus","text":"Termux has three menus: A context menu, navigation drawer and Termux section of the Android notification. The context menu is shown by a long press anywhere on the terminal screen: Select and Paste text to share text with other applications Reset the terminal if it gets stuck or Hangup to exit the current terminal session Style the terminal by selecting a font and a color scheme The navigation drawer is shown by swiping inwards from the left of the screen list and select terminal sessions, set a name for a session with a long press A button to toggle visibility of the touch keyboard. A button to create new terminal sessions (long press for creating a named session or a fail-safe one). If gesture navigation is enabled in Android, hold the edge of the screen briefly before swiping to bring up the navigation drawer The Android notification menu contains a Termux section. Press the Termux section to show the current terminal session or expand the Termux section to exiting all running terminal sessions or aquire a wake lock to avoid Termux entering sleep mode. A wake lock allows server and other background processes to run reliably and to continue to receive notifications","title":"Termux menus"},{"location":"termux/using-termux/#package-management","text":"Termux provides a Linux command line experience, providing a wide range of Unix tools and development environments. Termux uses a Debian based system and packages are easily installed apt install add tools and libraries to the Linux environment from the curated packages in the software center apt update updates the list of packages fromhe software center apt list --upgradable shows list of packages with new versions apt upgrade install new versions of currently installed packages apt-cache search --names-only - search for packages that include a specific pattern in their name. apt-cache show - shows detail of the supplied package name, including a description pkg is an alias for apt , the advance package tool, although there seems little benefit to using pkg if familiar with apt (they are both 3 characters)","title":"Package management"},{"location":"termux/using-termux/#byobu-terminal-tab-manager","text":"Byobu is an alternative to Termux provides a single terminal prompt. Byobu provides multiple shell prompts, allowing individual Clojure tools and editors to be run from the Termux prompt simultaneously. Practicalli uses byobu to run Neovim, a Clojure REPL and unit test watcher in separate byobu tabs with the ability to add further tabs for other command line tools. pkg install byobu F2 to create a new tab F3 to select previous tab F4 to select next tab byobu-enable command will configure the current shell to run byobu on startup. Test this is working by typing exit in Termux and start Termux app again. byobu-disable stops this behaviour and byobu will need to be run manually after starting Termux. Run the byobu-enable command again if zsh is configured after this step or if adding any other shell to Termux.","title":"Byobu terminal tab manager"},{"location":"version-control/","text":"Version Control There are several ways to interact with Git version control Shell out to command line Neovim terminal buffer Fugitive Neogit GitHub Issues & Pull Requests List, create and edit issues and pull requests from Neovim with Octo package. Octo connects to GitHub via the GitHub CLI, using a developer token for authentication","title":"Version Control"},{"location":"version-control/#version-control","text":"There are several ways to interact with Git version control Shell out to command line Neovim terminal buffer Fugitive Neogit","title":"Version Control"},{"location":"version-control/#github-issues-pull-requests","text":"List, create and edit issues and pull requests from Neovim with Octo package. Octo connects to GitHub via the GitHub CLI, using a developer token for authentication","title":"GitHub Issues &amp; Pull Requests"},{"location":"version-control/diffview/","text":"Diffview View working space and staged changes side by side Green - added lines Yellow - changed line Red - deleted lines SPC b toggles the sidebar buffer SPC w l and SPC w h to move cursor between diff buffer and sidebar buffer Neogit integration d in neogit status buffer ( SPC g s ) will open diffview in a new tab q to return to neogit status buffer Neogit page describes diffview integration","title":"Diffview"},{"location":"version-control/diffview/#diffview","text":"View working space and staged changes side by side Green - added lines Yellow - changed line Red - deleted lines SPC b toggles the sidebar buffer SPC w l and SPC w h to move cursor between diff buffer and sidebar buffer","title":"Diffview"},{"location":"version-control/diffview/#neogit-integration","text":"d in neogit status buffer ( SPC g s ) will open diffview in a new tab q to return to neogit status buffer Neogit page describes diffview integration","title":"Neogit integration"},{"location":"version-control/neogit/","text":"Neogit - interactive client for Git Neogit is an interactive git client that provides the core features of version control with Git. Neogit emulates many of the features found in magit. SPC g s to open :Neogit status buffer TAB toggles expansion of sections, files and hunks d provide a side-by-side view of changes q to quit Neogit and return to the previous tab Neovim is configured to use the magit style key bindings in practicalli/neovim-config-redux Branching b opens the branch menu, b - checkout a branch c - create a new branch d - delete a branch, D deletes local and remote branch l - checkout a remote branch and create a local tracking branch m - rename an existing local branch n - create a new branch Staging changes s to stage change under cursor, either file or hunk. S to stage all changes u to unstage change under cursor, U to unstage all changes v to select lines to stage within a hunk using s or unstage with u Commit c for the commit menu c for a new commit, a to amend the latest commit, w to reword a commit message, e to add staged changes to existing commit A new commit or amend commit qill open a new window to write a commit message (using a git commit message template if defined) :wq to save a commit message and initiate the commit. :q! to cancel the commit from the commit message buffer. Stashing changes Z to open the stash menu z to stash the working copy and staged files (index) i to only stash the staged files (index) Remote changes F to open the pull menu, p to pull changes (fetch and merge) from the remote repository, u t pull from the upstream repository, or e to specify the remote and branch names. P to open the push menu to open, -u to push to the current remote Commit history L l to view git commit history log RET on a log entry shows the commit details in a new window (split) q to close the commit details window Modify Git commit history r opens the rebase menu","title":"Neogit - interactive client for Git"},{"location":"version-control/neogit/#neogit-interactive-client-for-git","text":"Neogit is an interactive git client that provides the core features of version control with Git. Neogit emulates many of the features found in magit. SPC g s to open :Neogit status buffer TAB toggles expansion of sections, files and hunks d provide a side-by-side view of changes q to quit Neogit and return to the previous tab Neovim is configured to use the magit style key bindings in practicalli/neovim-config-redux","title":"Neogit - interactive client for Git"},{"location":"version-control/neogit/#branching","text":"b opens the branch menu, b - checkout a branch c - create a new branch d - delete a branch, D deletes local and remote branch l - checkout a remote branch and create a local tracking branch m - rename an existing local branch n - create a new branch","title":"Branching"},{"location":"version-control/neogit/#staging-changes","text":"s to stage change under cursor, either file or hunk. S to stage all changes u to unstage change under cursor, U to unstage all changes v to select lines to stage within a hunk using s or unstage with u","title":"Staging changes"},{"location":"version-control/neogit/#commit","text":"c for the commit menu c for a new commit, a to amend the latest commit, w to reword a commit message, e to add staged changes to existing commit A new commit or amend commit qill open a new window to write a commit message (using a git commit message template if defined) :wq to save a commit message and initiate the commit. :q! to cancel the commit from the commit message buffer.","title":"Commit"},{"location":"version-control/neogit/#stashing-changes","text":"Z to open the stash menu z to stash the working copy and staged files (index) i to only stash the staged files (index)","title":"Stashing changes"},{"location":"version-control/neogit/#remote-changes","text":"F to open the pull menu, p to pull changes (fetch and merge) from the remote repository, u t pull from the upstream repository, or e to specify the remote and branch names. P to open the push menu to open, -u to push to the current remote","title":"Remote changes"},{"location":"version-control/neogit/#commit-history","text":"L l to view git commit history log RET on a log entry shows the commit details in a new window (split) q to close the commit details window","title":"Commit history"},{"location":"version-control/neogit/#modify-git-commit-history","text":"r opens the rebase menu","title":"Modify Git commit history"}]}