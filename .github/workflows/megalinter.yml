---
# MegaLinter GitHub Action configuration file
# https://oxsecurity.github.io/megalinter

name: MegaLinter

# Trigger mega-linter at every push. Action will also be visible from Pull Requests to main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Apply linter fixes configuration
  APPLY_FIXES: all # APPLY_FIXES must be defined as environment variable
  APPLY_FIXES_EVENT: pull_request # events that trigger fixes on a commit or PR (pull_request, push, all)
  APPLY_FIXES_MODE: pull_request # are fixes are directly committed (commit) or posted in a PR (pull_request)

# Run Linters in parallel
concurrency:
  group: "${{ github.ref }}-${{ github.workflow }}"
  cancel-in-progress: true
jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      # MegaLinter Configuration
      - name: MegaLinter Run
        id: ml
        ## latest release of major version
        uses: oxsecurity/megalinter/flavors/ci_light@v6.15.0
        env:
          MEGALINTER_CONFIG: .github/linters/mega-linter.yml
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" # report individual linter status
          # Validate all source when push on main, else just the git diff with live.
          VALIDATE_ALL_CODEBASE: >-
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}

          # Run linters in parallel
          PARALLEL: true

          # Specific linters to run
          ENABLE: CREDENTIALS,MARKDOWN,GIT,SPELL,YAML
          SPELL_CSPELL_DISABLE_ERRORS: true
          SPELL_MISSPELL_DISABLE_ERRORS: true
          MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS: true
          MARKDOWN_MARKDOWNLINT_CONFIG_FILE: ".github/linters/markdown-lint.yaml"
          MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE: ".github/linters/markdown-lint-check.json"
          MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS: true
          # MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE: "project"
          MARKDOWN_REMARK_LINT_DISABLE_ERRORS: true
          # MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS: true
          # MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS: true
          #  - CLOJURE
          # CLOJURE_CLJ_KONDO_ARGUMENTS: '--lint deps.edn'
          # ADD CUSTOM ENV VARIABLES OR DEFINE IN A FILE .mega-linter.yml AT ROOT OF REPOSITORY
          # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks
          # Complete without returning error status
          # DISABLE_ERRORS: true

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      # Create pull request if applicable (for now works only on PR from same repository, not from forks)
      - name: Create Pull Request with applied fixes
        id: cpr
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          title: "[MegaLinter] Apply linters automatic fixes"
          labels: bot
      - name: Create PR output
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # Push new commit if applicable (for now works only on PR from same repository, not from forks)
      - name: Prepare commit
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: sudo chown -Rc $UID .git/
      - name: Commit and push applied linter fixes
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[MegaLinter] Apply linters fixes"
